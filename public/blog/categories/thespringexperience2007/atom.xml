<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thespringexperience2007 | Seeking Simplicity]]></title>
  <link href="http://mattstine.com/blog/categories/thespringexperience2007/atom.xml" rel="self"/>
  <link href="http://mattstine.com/"/>
  <updated>2013-07-10T21:05:06-07:00</updated>
  <id>http://mattstine.com/</id>
  <author>
    <name><![CDATA[Matt Stine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Spring Experience 2007 - Videos on the way!]]></title>
    <link href="http://mattstine.com/2008/02/04/the-spring-experience-2007-videos-on-the-way/"/>
    <updated>2008-02-04T15:28:00-08:00</updated>
    <id>http://mattstine.com/2008/02/04/the-spring-experience-2007-videos-on-the-way</id>
    <content type="html"><![CDATA[<p>I got an awesome email today...</p>

<blockquote><p>We are happy to announce that the video/audio streaming from TSE 2007 will be available online the week of February 11th for you.  You will have the opportunity to see/hear the TSE 2007 presentations you were not able to make at TSE 2007 due to all of the great sessions available per time period.  We have captured the entire session length including any demos/live coding.  Please look for the email from us next Monday, February 11th with the details about viewing the session content online.</p></blockquote>

<p>I'm extremely excited about this. For two reasons:</p>

<ol>
<li>I didn't get to finish my reviews of the sessions that I attended. Now that it has been several weeks since the conference, I don't feel like my memory of them is good enough to do a fair review. Now I can do a refresh and write!</li>
<li>There were several sessions that I wanted to attend that I couldn't - now I get to attend...and write!
Look forward to some more reviews from The Spring Experience 2007 in the coming weeks!</li>
</ol>


<blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of the Art in Dependency Injection: Rod Johnson]]></title>
    <link href="http://mattstine.com/2007/12/15/the-state-of-the-art-in-dependency-injection-rod-johnson/"/>
    <updated>2007-12-15T10:06:00-08:00</updated>
    <id>http://mattstine.com/2007/12/15/the-state-of-the-art-in-dependency-injection-rod-johnson</id>
    <content type="html"><![CDATA[<p>This was a truly fascinating talk. If you ever wanted to learn the entire history and landscape of dependency injection (DI), this was your opportunity. I really didn't realize how deep of a topic DI really is.</p>

<p>According to Rod, DI had its beginnings in 2002, in the Interface 21 Framework that was born from his seminal work, <a href="http://www.amazon.com/Expert-One-One-Design-Development/dp/1861007841">Expert One-on-One J2EE Design and Development</a>. In the beginning, DI was done solely through setter injection (SI), with external metadata (usually in XML). 2003 gave us Spring 0.9, which had the same DI model, but added FactoryBeans for indirection and proxy-based AOP (enabling among other things, declarative transaction management). With Spring, DI was always just one enabler of a complete enterprise solution. Contrast that with <a href="http://www.picocontainer.org/">PicoContainer</a>, also arriving on the scene in 2003, which was an ultra-lightweight DI-only container. PicoContainer brought us several innovations, including constructor injection, automatic resolution by type, and an attempt to dispense with external configuration.</p>

<p>Rod then discussed the Pros and Cons of Constructor Injection (CI). On the Pro side, we see that CI is great for immutable objects, can be used with existing code, enforces that the necessary dependencies are provided at object construction, and allows developers to dispense with methods like afterPropertiesSet(). On the Con side, there are no default arguments in Java, which forces us to ALWAYS provide all of the necessary dependencies, constructor overriding can be somewhat messy, and constructor argument names are not usually available through reflection, which forces us to depend on argument order for dependency resolution.</p>

<p>Spring 1.0, which arrived in late 2003, incorporated some of PicoContainer's innovation: CI, "Autowiring" by type and by name, as well as the ability to mix CI and SI. Here Rod reflected on Spring's pragmatic philosophy, whereby they are more than willing to incorporate the good ideas that others had first.</p>

<p>Spring 1.1 brought us method injection, a unique Spring feature, which solved the problem of long-lived managed objects which depend on short-lived objects. It also brought us Factory Methods. You now had the ability to create objects through invoking static factory methods or instance methods on other beans.</p>

<p>With the finalization of the <a href="http://java.sun.com/products/ejb/docs.html">EJB 3.0 standard</a> in May 2006, several new ideas became available in the world of DI: annotation-based DI, annotations for callback methods (e.g. @PostConstruct), scanning for annotations without any external configuration needed for a deployment unit, and field injection (FI). These EJB standard brought with it a new philosophy - that annotations are a superior model and that externalization should be a second-class citizen. The Pros of this standard? One big one - no configuration is necessary for simple cases. The Cons? Rod listed several: resources could only be injected from JNDI, no CI, limited control over object lifecycle, unsuitability for fine-grained object graphs, effectively usable ONLY with annotations, as the XML configuration option is so verbose, and it isn't just DI - it brings along with it enforcement of many obsolete EJB concepts (such as bean instance pooling).</p>

<p>Spring 2.0 arrived in late 2005 with its own share of innovations: integration with <a href="http://www.eclipse.org/aspectj/">AspectJ</a>, the ability to inject anything with an AspectJ aspect via @Configurable, namespaces to provide an XML-based DSL for external configuration, the @Required annotation, and pluggable scopes to manage the object lifecycle. About that same time, JBoss Seam introduced many strange ideas (that I didn't quite grasp from Rod's explanation): bijection, outjection, and subversion of control.</p>

<p>Some additional players on the field include Spring Java Config, which is a DSL for configuration in Java, <a href="http://code.google.com/p/google-guice/">Google Guice 1.0</a>, and the <a href="http://jcp.org/en/jsr/detail?id=299">JSR-299 Web Beans spec</a>, which Rod described as "blogware" in that there is currently no available implementation.</p>

<p>Finally we got to Spring 2.5, released last month. Rod didn't have his slides printed or available on the web (argh!), so about this time my hand was really hurting from taking furious notes, and I simply gave up. Fortunately, most of what Rod covered was redundant from some of the other sessions, so I'll have or will blog about it later. About the only thing I really don't have good notes on is Spring Java Config, which he discussed pretty extensively. If you want to learn more about it, check out <a href="http://www.springframework.org/javaconfig">http://www.springframework.org/javaconfig</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax Integration Guide for 2008: Jeremy Grelle]]></title>
    <link href="http://mattstine.com/2007/12/14/ajax-integration-guide-for-2008-jeremy-grelle/"/>
    <updated>2007-12-14T15:40:00-08:00</updated>
    <id>http://mattstine.com/2007/12/14/ajax-integration-guide-for-2008-jeremy-grelle</id>
    <content type="html"><![CDATA[<p>This talk looked really exciting going in. Jeremy is a member of the Spring Web Products team and the lead of Spring Faces, as well as a member of the JSF 2.0 Expert Group. He describes himself as the resident Ajax freak at SpringSource. Jeremy began by discussing the current Ajax landscape, highlighting what he believes are the important features a successful framework must deliver, and then identifying the frameworks he considers to be the cream of the crop. No surprises here on the list: Prototype/Scriptaculous, jQuery, YUI, Ext, and Dojo. He then gave a brief high-level overview of each framework - I really didn't learn anything new here, as I've been following these frameworks for quite awhile. He mentioned the commonality that all of these frameworks are about more than asynchronous client-server communication - they're about improving your client-side code and user experience. See Dion's May 2007 comment that Ajax "was never about the acronym - it's about building killer websites." What is good about all of these frameworks is that you can use all of them in an unobtrusive manner and progressively enhance your UI. This gives you the ability to only Ajaxify what you need and also get graceful degradation.</p>

<p>In the second portion of his talk, Jeremy talked about connecting to Spring. I was really hoping that the "goods" would be delivered here. He started by mentioning DWR, which I think is a really nice framework. It merited 2 slides and no demo (even though there was a slide mentioning a demo). I don't think Jeremy really cares for it or GWT, as he sort of lumped them together and didn't mention them again. I do appreciate his point that neither really allows you to harvest any existing controlling infrastructure that we may have built using Spring MVC or another framework.</p>

<p>Jeremy then moved into what he considers the better way to do it, which is the progressive enhancement I mentioned above. He took the existing Spring Booking MVC + Web Flow example application and ajaxified portions of it. He did this using an interesting combination of Apache Tiles, some Javascript "pseudo-AOP" he lifted from the SpringFaces project, and a bit of Dojo. It seemed to work really well, but it wasn't immediately clear how this type of technology was going to be made available to us as developers. He said something along the lines of "you don't have to be using JSF to use this Javascript, so we probably need to change the name to something else." I hope they figure out soon so I can get my hands on it. :-)</p>

<p>He closed by briefly discussing REST's place in the future of Spring Web. The ideal scenario, according to Jeremy, is that we will be able to request different representations of the same resource. For example, we could request HTML for full page display or partial DOM updates, and JSON for intelligent widgets like the Dojo table.</p>

<p>It looks like a lot of exciting things will happen in 2008. I hope I don't have to wait too long.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's New in Spring 2.5? : Juergen Hoeller]]></title>
    <link href="http://mattstine.com/2007/12/14/whats-new-in-spring-25-juergen-hoeller/"/>
    <updated>2007-12-14T15:20:00-08:00</updated>
    <id>http://mattstine.com/2007/12/14/whats-new-in-spring-25-juergen-hoeller</id>
    <content type="html"><![CDATA[<p>This was my second talk of TSE 2007. I have to admit I chose it by process of elimination - none of the second session talks particularly jumped out and grabbed me like Chris Richardson's talk.</p>

<p>Juergen is the project lead for the Spring Framework, so he was the obvious choice to give this talk. Juergen split it up into three sections:</p>

<ol>
<li>Platforms</li>
<li>Annotation Configuration</li>
<li>AspectJ Support
To break down part one as quickly as possible, Spring supports virtually EVERYTHING. You get JDK 1.4 all the way to Java 6, including all of the new API's in Java 6. It fully supports Java EE 5 while remaining backward compatible all the way to J2EE 1.3.  You can now deploy a Spring ApplicationContext as a RAR file, and you also get full JCA 1.5 support (if you want to know what that means, don't ask me :-)). Quite notable was the fact that they have worked with IBM to support WebSphere's proprietary transaction manager. Also interesting was Spring's continuing strong support for OSGi as an alternative enterprise runtime.</li>
</ol>


<p>The annotation configuration part of the talk was quite fascinating. I'm something of an annotations junkie - I have to be careful about that. At any rate, it was so good that I was interested enough to attend Juergen and Mark Fisher's later talk that was completely dedicated to the subject. I'll leave the details for my entry on that talk.</p>

<p>The final portion, on AspectJ support, was equally fascinating. The first new feature was the ability to advise specific beans by name rather than by type using AspectJ. This was made even sweeter by the fact that you can use pattern matching in your  definition.  Very exciting was the ability to do AspectJ load-time weaving, meaning you can use the power of AspectJ at runtime without involving the AspectJ compiler. Unfortunately, this isn't available across all appservers. I didn't get a chance to ask and comfirm, but it seems that JBoss (our primary appserver) does not support this. GlassFish, Weblogic, OC4J, and Tomcat were all mentioned as being able to handle it.</p>

<p>The most interesting part of this talk for me was the ability to annotate a class as @Configurable, and then do dependency injection on it even thought it isn't managed by Spring. You could do this in Spring 2.0, but you had to use the AspectJ compiler. Now, with load-time weaving, you can do this at runtime! I really could have used this recently when I wanted to inject a single dependency into a class that was really overkill to manage as a Spring bean. Since I'm using Spring 2.5 in this project, I can go back and try this feature. Exciting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Programming with the Official Rod Johnson Bobblehead]]></title>
    <link href="http://mattstine.com/2007/12/13/pair-programming-with-the-official-rod-johnson-bobblehead/"/>
    <updated>2007-12-13T21:20:00-08:00</updated>
    <id>http://mattstine.com/2007/12/13/pair-programming-with-the-official-rod-johnson-bobblehead</id>
    <content type="html"><![CDATA[<p><a href="http://3.bp.blogspot.com/_Vo63LRwAZbk/R2HoivNFFDI/AAAAAAAAAWg/Kp-khRPCwxU/s1600-h/rod_johnson_pairprog.jpg"><img src="http://3.bp.blogspot.com/_Vo63LRwAZbk/R2HoivNFFDI/AAAAAAAAAWg/Kp-khRPCwxU/s400/rod_johnson_pairprog.jpg" alt="" /></a></p>

<p>As you can see, Rod really likes my Spring MVC configuration. :-)</p>
]]></content>
  </entry>
  
</feed>
