<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: goals | Seeking Simplicity]]></title>
  <link href="http://mattstine.com/blog/categories/goals/atom.xml" rel="self"/>
  <link href="http://mattstine.com/"/>
  <updated>2012-05-25T13:27:54-05:00</updated>
  <id>http://mattstine.com/</id>
  <author>
    <name><![CDATA[Matt Stine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pomodoro: The First Iteration]]></title>
    <link href="http://mattstine.com/2009/11/04/pomodoro-the-first-iteration/"/>
    <updated>2009-11-04T15:44:32-06:00</updated>
    <id>http://mattstine.com/2009/11/04/pomodoro-the-first-iteration</id>
    <content type="html"><![CDATA[<p>I spent about an hour last night reading through Francesco Cirillo's e-book <em>The Pomodoro Technique</em>. Up until this point I knew the basics of the technique, but I really wanted to drill down and get the details. I won't explain those here - visit <a href="http://www.pomodorotechnique.com/">http://www.pomodorotechnique.com/</a> to get the lowdown. What I want to talk about is my experience applying the technique this morning.</p>

<p>I managed to complete two Pomodoros. Each of the Pomodoros was filled with internal interruptions of various kinds. One of the first things that I observed was something that I already knew from yesterday's TADD post: I am definitely not used to focusing on one distinct task for any prolonged length of time. My mind was constantly bouncing around from idea to idea, almost as if my R-mode had a "memory leak." My first Pomodoro was primarily a reading task - I used it for my daily Bible reading and meditation. This part of my day brings it's focus challenges anyway, as I'm not doing anything tactile. I find its much easier to focus when I'm typing or writing something. The Pomodoro offered no relief from this, save a plan for dealing with the interruptions as they came up. First, note down that one happened with an apostrophe, and second, write the todo item or idea down on my inventory. This definitely helped to refocus my mind on the work at hand, but I still wish I could find a way to prevent those streamer thoughts from landing in the first place.</p>

<p>The second thing that I observed was that my workspace is not at all setup to encourage focus. In recent months I've stopped using task-focused desktops in OS X, something that Neil Ford recommends in <em>The Productive Programmer</em>. I was reminded of this later in the day today reading <a href="http://memeagora.blogspot.com/2009/11/productivity-pron.html">his latest blog entry</a>. I think it would be a good idea to use my first Pomodoro of the day to setup task-based desktops for each of the tasks on my TODO list. I could fire up all of the programs necessary and drop them on to a space. Since a lot of my work is focused on web-based applications, I think I'll probably use Fluid (<a href="http://fluidapp.com/">http://fluidapp.com/</a>) to create site specific browsers for the web applications that I need for each task. Another thing that I need to do is turn off the ringer on my phones and the new message notifications on Entourage. One tool that I did already have in my arsenal is Doodim, which blacks out everything except for the currently focused window on OS X. The only problem with Doodim (<a href="http://www.lachoseinteractive.net/en/products/doodim/">http://www.lachoseinteractive.net/en/products/doodim/</a>) is that it doesn't work with external screens, so only my MacBook Pro's screen gets the benefits. I counteracted this by making sure that the window I was actively using was on the external screen and maximized, but this won't work for some tasks during which I might have multiple small windows to interact with.</p>

<p>The final thing that I observed is that I still definitely live in an interruption-based work environment. My third attempt to complete a Pomodoro was repeated three times, and none of these times did I make it without having to stop and actively handle an external interruption. The difference? My office door was open. My first two Pomodoros were completed with the office door closed and my "Ssshhh...Genius at work!" sign on the door. This is going to be a tough one to handle. I don't want to keep my office door closed all day, for more reasons than one. First, I don't want to seem completely unapproachable. I'm a manager these days, and a huge part of my job is being available for people. For me, some interruptions will always be OK. But how can I sort those out prior to them happening? This is something I'll be stewing on over the next couple of days. Second, my office turns into an absolute OVEN when the door is closed for too long. We have a really strange HVAC system that completely overreacts to small changes in the temperature. Unfortunately, it always seems to think I need to be slow cooked. ::SIGH::</p>

<p>So, there you have it. I've learned a lot - I observed quite a view things about my work patterns and my environment, and will be working over the next few days to make changes to both to support better focus. If you have any comments or suggestions, please feel free to comment. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career 2.0: Toastmasters]]></title>
    <link href="http://mattstine.com/2009/05/11/career-20-toastmasters/"/>
    <updated>2009-05-11T15:59:31-05:00</updated>
    <id>http://mattstine.com/2009/05/11/career-20-toastmasters</id>
    <content type="html"><![CDATA[<p>I'm currently making my second trip through <a href="http://agileartisans.com/main">Jared Richardson's</a> excellent book <a href="http://www.lulu.com/content/5925115">Career 2.0: Take Control of Your Life</a>. In the "Public Speaking" chapter, one of the recommended avenues for public speaking practice is <a href="http://www.toastmasters.org">Toastmasters</a>. I first heard of Toastmasters...you guessed it, on my first trip through the book. Shortly after returning home from <a href="http://www.nofluffjuststuff.com/conference/st_louis/2009/03/index.html">NFJS St. Louis</a>, I decided to see if I could find a local club. Lo and behold, a Toastmasters club already meets on the St. Jude Children's Research Hospital campus! I had no excuse but to check it out at this point.</p>

<p>For the uninitiated, Toastmasters is an organization focused on helping individuals hone their communication and leadership skills in a safe environment. This is accomplished primarily through three different avenues:</p>

<ul>
<li><p>Serving in one of the meeting leadership roles, such as Toastmaster (the meeting facilitator);</p></li>
<li><p>Giving a prepared speech/talk from the list of speech projects in the Toastmasters "coursework";</p></li>
<li><p>Speaking extemporaneously on one of several "table topics," which are speaking prompts provided during the meeting.</p></li>
</ul>


<p>Participation in any of these avenues is immediately followed up with feedback from one or more people playing various "evaluator" roles. I couldn't help but see the parallels to agile software development!</p>

<p>I've now attended three meetings, and at the last meeting I decided to join up. The St. Jude club is an extremely friendly group, and several of its members are very accomplished public speakers. You can definitely tell that the Toastmasters experience has helped them enhance their communications skills. I'm looking forward to polishing my own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional programming blog aggregator in the works...]]></title>
    <link href="http://mattstine.com/2009/04/30/functional-programming-blog-aggregator-in-the-works/"/>
    <updated>2009-04-30T13:31:58-05:00</updated>
    <id>http://mattstine.com/2009/04/30/functional-programming-blog-aggregator-in-the-works</id>
    <content type="html"><![CDATA[<p>So I'm in the midst of planning my next toy project, specifically with an aim to build something for the cloud, be it <a href="http://code.google.com/appengine">Google App Engine</a>, <a href="http://mor.ph">Mor.ph</a>, <a href="http://aws.amazon.com/ec2/">EC2</a>, etc. (that part is still up for grabs). What I'd like to do is an opt-in blog aggregation site focused around functional programming. It would be very similar to what <a href="http://blogs.bytecode.com.au/glen/">Glen Smith</a> has done with <a href="http://groovyblogs.org">groovyblogs.org</a>. Groovyblogs is currently my number one referral site and is generating about 20% of the traffic for this blog. I think it is a great way to find out what blogs are out there in a given space, and there doesn't seem to be an equivalent for the functional space. Since my LOTY interest is focused in the functional space, particularly around Scala and Clojure, and my TOTY interest is the cloud technologies out there, it seems like the perfect marriage.</p>

<p>So here's my question. Would you be interested in using such a site? As a reader, blogger, or both? Please sound off. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LOTY...Part Deux]]></title>
    <link href="http://mattstine.com/2009/04/06/lotypart-deux/"/>
    <updated>2009-04-06T22:31:58-05:00</updated>
    <id>http://mattstine.com/2009/04/06/lotypart-deux</id>
    <content type="html"><![CDATA[<p><img src="http://mattstine.files.wordpress.com/2009/04/scala_vs_clojure.jpg" alt="scala_vs_clojure" /><a href="http://mattstine.files.wordpress.com/2009/04/scala_vs_clojure.jpg2009/04/02/loty-time-again-scala-or-clojure">A few days ago I pontificated</a> on my need to choose a new "Language of the Year." Right now I'm attempting to choose between <a href="http://www.scala-lang.org/">Scala</a> and <a href="http://clojure.org/">Clojure</a>. If nothing else, I've learned from this exercise that asking the community for feedback is a GOOD thing. Your comments have been very helpful.</p>

<p>To summarize:</p>

<ol>
<li><p>As far as the polls go, Scala is in the lead by a margin of 4 to 2.</p></li>
<li><p>Two of the Scala votes have been simple +1's, and two have provided a supporting argument.</p></li>
<li><p>Both Clojure voters have provided a supporting argument.</p></li>
<li><p>So, to make this a bit more of a fair fight, I'm only going to consider the "supported votes" at this point. This leads to the obvious result of a tie!</p></li>
</ol>


<p>So, what to do?</p>

<p>The argument for using Scala is that it is a functional/OO hybrid, so it will be easier to slide into. Interestingly enough, the argument against using Scala is that it is a functional/OO hybrid, so it will be easier to slide back into OO/imperative habits! Clojure, being more of a purely functional language, will be harder to get into initially, but will force me to think functionally. Hmmm...</p>

<p>So here's my idea. Let's do this the agile way. What I'd like to do is complete a timeboxed spike (in terms of actual time spent learning the language, not calendar time - I'm doing this in my spare time, and I've got my wife, four kids, and three other side projects competing for my attention!) of roughly two weeks in each language. The first week of the spike would be spent getting comfortable with the syntax, reading articles/documentation/blogs/etc., writing "Hello, World!" etc. The second week of the spike would be spent solving the same problem in each language, preferably a problem sitting in the functional sweet spot.</p>

<p>How does this sound to everyone? And to follow up, does anyone have a suggested problem I might tackle? Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LOTY Time Again: Scala or Clojure?!?!]]></title>
    <link href="http://mattstine.com/2009/04/02/loty-time-again-scala-or-clojure/"/>
    <updated>2009-04-02T15:21:21-05:00</updated>
    <id>http://mattstine.com/2009/04/02/loty-time-again-scala-or-clojure</id>
    <content type="html"><![CDATA[<p>In 2007 <a href="http://www.mattstine.com/2007/07/10/my-professional-development-goals-for-2007-2008/">I established several professional development goals</a> (<a href="http://www.mattstine.com/2008/01/02/mid-year-review-my-professional-development-goals-for-2007-2008/">and later reported my progress on these</a>), one of which was to learn Groovy and Grails. This goal stemmed from the continually referenced idea from <em>The Pragmatic Programmer</em> to "learn a new language every year." This idea has become so ubiquitous that it even has it's own four-letter acronym, LOTY (Language of the Year).</p>

<p>Since establishing and reporting on these goals, I've had several things get in the way of fully realizing all of them. However, I can safely say that in the last two years I have mastered enough Groovy and Grails that they no longer fit in the LOTY category. At this point they're really not showing my anything that is causing any paradigm shifts for me. They're comfortable. When I learn a new feature, it just seems to make sense, and nothing surprises me anymore. Languages like these aren't good LOTY candidates because one of the purposes of learning a LOTY is to challenge and change your ideas about programming. Groovy doesn't do this for me anymore. It's time to move on (not to say that I'm dropping Groovy and Grails as a tool - I'm using them more now than ever - they're just not a learning tool for me anymore).</p>

<p>So, at this point I want to delve into a language that attempts to tackle the concurrent/multicore programming challenge. I'd like to stay on the JVM because I appreciate the benefits that it brings as a platform, so for now Erlang is out. The two leading candidates in the JVM/concurrent/multicore arena seem to be <a href="http://www.scala-lang.org/">Scala</a> and <a href="http://clojure.org/">Clojure</a>. An added benefit of both of these languages is that they support the functional paradigm, something I haven't really played with since my computer science education days and a very interesting language named Haskell.</p>

<p>Scala is a multiparadigm language, supporting both object-oriented and functional constructs. It is statically typed, yet offers very nice type inference. Clojure, on the other hand, is a functional Lisp derivative with almost no OO constructs that is dynamically typed. Both are designed to enable concurrent programming. Which one do I choose? I open the floor for comments.</p>
]]></content>
  </entry>
  
</feed>
