<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Seeking Simplicity]]></title>
  <link href="http://mattstine.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://mattstine.com/"/>
  <updated>2014-06-30T17:40:54-05:00</updated>
  <id>http://mattstine.com/</id>
  <author>
    <name><![CDATA[Matt Stine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure on Cloud Foundry]]></title>
    <link href="http://mattstine.com/2013/05/29/clojure-on-cloud-foundry/"/>
    <updated>2013-05-29T22:10:00-05:00</updated>
    <id>http://mattstine.com/2013/05/29/clojure-on-cloud-foundry</id>
    <content type="html"><![CDATA[<p>I was inspired by Brian McClain's <a href="http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/">post on bringing Haskell to Cloud Foundry</a> using Cloud Foundry v2 buildpacks, so I decided to go on a buildpack journey of my own. Since Clojure is the language I most enjoying "toying around with," I thought I'd try to deploy a simple Clojure web application using the <a href="https://github.com/mstine/heroku-buildpack-clojure">Heroku Clojure Buildpack</a>.</p>

<p>To reiterate some of the coolness around buildpacks, they are what allows a PaaS like Cloud Foundry or Heroku to support various runtimes without first building that support into the core platform. If your favorite language or framework runtime isn't available, there's absolutely nothing stopping you from providing your own buildpack to support it. Stuff can get crazy -- McClain has even <a href="https://twitter.com/BrianMMcClain/status/339479905974751232">hinted at bringing FORTRAN support to Cloud Foundry</a>.</p>

<p>I decided for my experiment to build a VERY basic "Hello World" style application using <a href="https://github.com/ring-clojure/ring">Ring</a>, which is "a Clojure web applications library inspired by Python's WSGI and Ruby's Rack." The easiest way to get started building Ring applications is to utilize the popular Clojure build tool <a href="http://github.com/technomancy/leiningen">Leiningen</a>.</p>

<p>First I started by creating a new project:</p>

<p><code>bash
$ lein new hello-cf
$ cd hello-cf
</code></p>

<p>The next task was to add the Ring dependencies to my <code>project.clj</code> file:</p>

<p>``` clojure
(defproject hello-cf "0.1.0-SNAPSHOT"
  :min-lein-version "2.0.0"
  :description "Hello Clojure on Cloud Foundry!"
  :license {:name "Eclipse Public License"</p>

<pre><code>        :url "http://www.eclipse.org/legal/epl-v10.html"}
</code></pre>

<p>  :dependencies [[org.clojure/clojure "1.4.0"]</p>

<pre><code>             [ring/ring-core "1.1.8"]
             [ring/ring-jetty-adapter "1.1.8"]])
</code></pre>

<p>```</p>

<p>Then it was time to create the Ring application itself, by editing <code>src/hello_cf/core.clj</code>:</p>

<p>``` clojure
(ns hello-cf.core
  (:use [ring.adapter.jetty :only [run-jetty]]))</p>

<p>(defn handler [request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body "Hello Cloud Foundry from heroku-buildpack-clojure!"})</p>

<p>(defn -main [port]
  (run-jetty handler {:port (Integer. port)}))
```</p>

<p>Let's break this down a bit. The <code>handler</code> function will handle any HTTP request that hits our application, and will return an "OK" response containing a pleasant message indicating that we've succeeded. That's really about it. Our application is complete. We can test it out by running the following:</p>

<p><code>bash
$ lein trampoline run -m hello-cf.core 8080
2013-05-29 22:42:52.576:INFO:oejs.Server:jetty-7.6.1.v20120215
2013-05-29 22:42:52.804:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
</code></p>

<p>Hitting <code>http://localhost:8080</code> in the browser confirms that we're well on our way. Now it's time to trying pushing the application to Cloud Foundry. As Brian stated in his blog, one of the stellar aspects of Cloud Foundry buildpacks is that they are approximately the same as Heroku buildpacks. Practically, this means that one <em>should</em> be able to utilize a Heroku buildpack on Cloud Foundry with minimal or no modifications. Let's put that theory to the test, shall we? Before we do, let's create a <code>Procfile</code> quickly to let the buildpack know what we want to run:</p>

<p><code>
web: lein with-profile production trampoline run -m hello-cf.core $PORT
</code></p>

<p>And on with the push:</p>

<p>``` bash
cf push hello-cf --buildpack=git://github.com/heroku/heroku-buildpack-clojure.git
Using manifest file manifest.yml</p>

<p>Creating hello-cf... OK</p>

<p>1: hello-cf
2: none
Subdomain> hello-cf</p>

<p>1: mstine.cf-app.com
2: none
Domain> mstine.cf-app.com</p>

<p>Binding hello-cf.mstine.cf-app.com to hello-cf... OK
Uploading hello-cf... OK
Starting hello-cf... OK
-----> Downloaded app package (12K)
Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
Installing heroku-buildpack-clojure.git.
-----> Installing OpenJDK 1.6...done
-----> Installing Leiningen</p>

<pre><code>   Downloading: leiningen-2.1.2-standalone.jar
   Writing: lein script
</code></pre>

<p>-----> Building with Leiningen</p>

<pre><code>   Running: lein with-profile production compile :all
   Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.pom from clojars
   Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.jar from clojars
   Performing task 'compile' with profile(s): 'production'
   Retrieving org/clojure/clojure/1.4.0/clojure-1.4.0.pom from
   ...
   Compiling hello-cf.core
</code></pre>

<p>-----> Uploading staged droplet (66M)
-----> Uploaded droplet
Checking hello-cf...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 down
  0/1 instances: 1 starting
  0/1 instances: 1 flapping
Application failed to start.
```</p>

<p>Drat. Let's take a quick look at the logs to see what may be awry:</p>

<p><code>bash
Reading logs/stderr.log... OK
/home/vcap/app/.lein/bin/lein: line 42: java: command not found
</code></p>

<p>Ah-hah! Looks like the existing buildpack is making some assumptions about the structure of our application that no longer hold true on Cloud Foundry. So, I followed in Brian's footsteps and <a href="https://github.com/mstine/heroku-buildpack-clojure">forked away</a>. One small <a href="https://github.com/mstine/heroku-buildpack-clojure/commit/fd2c46cc23267fa2d808123d2fd58f4295da4b85">commit</a> looks like it ought to fix the problem. Let's give it another try:</p>

<p>``` bash
cf push hello-cf --buildpack=git://github.com/mstine/heroku-buildpack-clojure.git
Using manifest file manifest.yml</p>

<p>Not applying manifest changes without --reset
See <code>cf diff</code> for more details.</p>

<p>Uploading hello-cf... OK
Changes:
  buildpack: 'git://github.com/heroku/heroku-buildpack-clojure.git' -> 'git://github.com/mstine/heroku-buildpack-clojure.git'
Updating hello-cf... OK
Stopping hello-cf... OK</p>

<p>Starting hello-cf... OK
-----> Downloaded app package (8.0K)
-----> Downloaded app buildpack cache (17M)
Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
Installing heroku-buildpack-clojure.git.
-----> Installing OpenJDK 1.6...done
-----> Using cached Leiningen 2.1.2</p>

<pre><code>   Writing: lein script
</code></pre>

<p>-----> Building with Leiningen</p>

<pre><code>   Running: lein with-profile production compile :all
   Performing task 'compile' with profile(s): 'production'
   Compiling hello-cf.core
</code></pre>

<p>-----> Uploading staged droplet (66M)
-----> Uploaded droplet
Checking hello-cf...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
```</p>

<p>BOOM!</p>

<p>I quickly pointed my browser, and as yesterday's tweet indicates, success:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Yeah...that just happened. cc: <a href="https://twitter.com/cloudfoundry">@cloudfoundry</a> <a href="https://twitter.com/search?q=%23clojure&amp;src=hash">#clojure</a> <a href="https://twitter.com/search?q=%23buildpacks&amp;src=hash">#buildpacks</a> <a href="https://twitter.com/search?q=%23winning&amp;src=hash">#winning</a> <a href="http://t.co/9lJHqmWQPw">pic.twitter.com/9lJHqmWQPw</a></p>&mdash; Matt Stine (@mstine) <a href="https://twitter.com/mstine/statuses/339248683151417344">May 28, 2013</a></blockquote>


<script async src="http://mattstine.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>Score another win for Cloud Foundry's buildpack support. I'm now toying with the idea of doing something of a world tour of LISP on Cloud Foundry. My next candidate may be <a href="https://github.com/evhan/heroku-buildpack-chicken">Scheme</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional programming blog aggregator in the works...]]></title>
    <link href="http://mattstine.com/2009/04/30/functional-programming-blog-aggregator-in-the-works/"/>
    <updated>2009-04-30T13:31:58-05:00</updated>
    <id>http://mattstine.com/2009/04/30/functional-programming-blog-aggregator-in-the-works</id>
    <content type="html"><![CDATA[<p>So I'm in the midst of planning my next toy project, specifically with an aim to build something for the cloud, be it <a href="http://code.google.com/appengine">Google App Engine</a>, <a href="http://mor.ph">Mor.ph</a>, <a href="http://aws.amazon.com/ec2/">EC2</a>, etc. (that part is still up for grabs). What I'd like to do is an opt-in blog aggregation site focused around functional programming. It would be very similar to what <a href="http://blogs.bytecode.com.au/glen/">Glen Smith</a> has done with <a href="http://groovyblogs.org">groovyblogs.org</a>. Groovyblogs is currently my number one referral site and is generating about 20% of the traffic for this blog. I think it is a great way to find out what blogs are out there in a given space, and there doesn't seem to be an equivalent for the functional space. Since my LOTY interest is focused in the functional space, particularly around Scala and Clojure, and my TOTY interest is the cloud technologies out there, it seems like the perfect marriage.</p>

<p>So here's my question. Would you be interested in using such a site? As a reader, blogger, or both? Please sound off. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Clojure!]]></title>
    <link href="http://mattstine.com/2009/04/24/hello-clojure/"/>
    <updated>2009-04-24T17:12:23-05:00</updated>
    <id>http://mattstine.com/2009/04/24/hello-clojure</id>
    <content type="html"><![CDATA[<pre><code>; Hello World!
(defn hello [name]
  (println "Hello, " name))

(hello "World!")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LOTY...Part Deux]]></title>
    <link href="http://mattstine.com/2009/04/06/lotypart-deux/"/>
    <updated>2009-04-06T22:31:58-05:00</updated>
    <id>http://mattstine.com/2009/04/06/lotypart-deux</id>
    <content type="html"><![CDATA[<p><img src="http://mattstine.files.wordpress.com/2009/04/scala_vs_clojure.jpg" alt="scala_vs_clojure" /><a href="http://mattstine.files.wordpress.com/2009/04/scala_vs_clojure.jpg2009/04/02/loty-time-again-scala-or-clojure">A few days ago I pontificated</a> on my need to choose a new "Language of the Year." Right now I'm attempting to choose between <a href="http://www.scala-lang.org/">Scala</a> and <a href="http://clojure.org/">Clojure</a>. If nothing else, I've learned from this exercise that asking the community for feedback is a GOOD thing. Your comments have been very helpful.</p>

<p>To summarize:</p>

<ol>
<li><p>As far as the polls go, Scala is in the lead by a margin of 4 to 2.</p></li>
<li><p>Two of the Scala votes have been simple +1's, and two have provided a supporting argument.</p></li>
<li><p>Both Clojure voters have provided a supporting argument.</p></li>
<li><p>So, to make this a bit more of a fair fight, I'm only going to consider the "supported votes" at this point. This leads to the obvious result of a tie!</p></li>
</ol>


<p>So, what to do?</p>

<p>The argument for using Scala is that it is a functional/OO hybrid, so it will be easier to slide into. Interestingly enough, the argument against using Scala is that it is a functional/OO hybrid, so it will be easier to slide back into OO/imperative habits! Clojure, being more of a purely functional language, will be harder to get into initially, but will force me to think functionally. Hmmm...</p>

<p>So here's my idea. Let's do this the agile way. What I'd like to do is complete a timeboxed spike (in terms of actual time spent learning the language, not calendar time - I'm doing this in my spare time, and I've got my wife, four kids, and three other side projects competing for my attention!) of roughly two weeks in each language. The first week of the spike would be spent getting comfortable with the syntax, reading articles/documentation/blogs/etc., writing "Hello, World!" etc. The second week of the spike would be spent solving the same problem in each language, preferably a problem sitting in the functional sweet spot.</p>

<p>How does this sound to everyone? And to follow up, does anyone have a suggested problem I might tackle? Cheers!</p>
]]></content>
  </entry>
  
</feed>
