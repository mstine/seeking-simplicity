<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: groovy | Seeking Simplicity]]></title>
  <link href="http://mattstine.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://mattstine.com/"/>
  <updated>2014-07-02T16:15:06-05:00</updated>
  <id>http://mattstine.com/</id>
  <author>
    <name><![CDATA[Matt Stine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing Grails Plugin Artifacts with Filters]]></title>
    <link href="http://mattstine.com/2009/11/10/securing-grails-plugin-artifacts-with-filters/"/>
    <updated>2009-11-10T13:50:11-06:00</updated>
    <id>http://mattstine.com/2009/11/10/securing-grails-plugin-artifacts-with-filters</id>
    <content type="html"><![CDATA[<p>So you've just installed the handy dandy Spring Security plugin (http://grails.org/plugin/acegi), which makes it incredibly easy to secure entire Grails controllers and/or controller actions with annotations, such as the following:</p>

<p>This is enabled by turning on controller annotations in your SecurityConfig.groovy file:</p>

<p>So all is now good in our project. We can secure either controllers or actions with annotations, enabling us to declaratively setup security side-by-side with the code that we're securing in a very straightforward manner. You can continue developing your Grails applications with glee, fully assured that security is no longer an issue. But wait, one day you decide to install one of the many useful Grails plugins that add controller artifacts to your application. Lo and behold, you have no way to secure those controllers! Of course, you could descend into $USER_HOME/.grails/$GRAILS_VERSION/projects/projectName/plugins/pluginX and hack the source code for your individual instance of the plugin. This ought to work, but you're now rather constrained in that every time you update the plugin you'll need to remember to go make this manual change. That doesn't sound very agile at all, does it? OK, so how about forking the plugin? This is a little bit better, but now you have the burden of merging changes from the global plugin repository to yours every time a new release happens. This is better, but still a bit cumbersome. How about becoming a committer and adding it to the global source? Of course not. Not everyone will want to secure their plugins the same way you do, and you've just introduced a rather unnecessary dependency on the Spring Security plugin. I say all this in an attempt to paint a grim picture. In reality, we're actually in very good shape. Grails Filters to the rescue!</p>

<p>All that you need to do is create a Grails filter that will match requests to the plugin artifact in question and then delegate to Spring Security for authorization. If they are authorized, you simply return true. If not, you can direct them to your login screen. It's this simple:</p>

<p>As you can see here, I've secured both the Blurb plugin and the Settings plugin in this manner by requiring that the logged in user be in the ROLE_ADMIN role. Now as Glen Smith would say, that's a snack!</p>

<p><em><strong>Update:</strong> <a href="http://burtbeckwith.com/blog/">Burt Beckwith</a> enlightened me to an approach that will get this done without the use of filters that will also direct you to the requested URL after login rather than the main page. Unfortunately I've never been able to track this down before. Just add the following to SecurityConfig.groovy:</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Java "Groovier" with LambdaJ]]></title>
    <link href="http://mattstine.com/2009/10/09/making-java-groovier-with-lambdaj/"/>
    <updated>2009-10-09T09:37:06-05:00</updated>
    <id>http://mattstine.com/2009/10/09/making-java-groovier-with-lambdaj</id>
    <content type="html"><![CDATA[<p>I spent the better part of yesterday tracing my way through the codebase for a large-scale enterprise application that my team is building right now, and I happened upon the following piece of code:</p>

<p>``` java
//...imports excluded for clarity
public class BusinessActivityBinMetaClassHelper {
//...
   public static List<Long> getSrmMetaClassIdListJava(List<BusinessActivityBinMetaClass> businessActivityBinMetaClassList) {</p>

<pre><code>  List&lt;Long&gt; srmMetaClassIdList = new ArrayList&lt;Long?();

  if(businessActivityBinMetaClassList != null) {
     for(BusinessActivityBinMetaClass businessActivityBinMetaClass : businessActivityBinMetaClassList) {
         if(businessActivityBinMetaClass.getSrmMetaClass() != null &amp;&amp; businessActivityBinMetaClass.getSrmMetaClass().getSrmMetaClassId() != null) {
           srmMetaClassIdList.add
              (businessActivityBinMetaClass.getSrmMetaClass().getSrmMetaClassId());
        }
     }
  }

  return srmMetaClassIdList;
</code></pre>

<p>   }
//...
}
```</p>

<p>As I read this code, I thought "This just SCREAMS a need for Groovy's closure iterators." So, last night I quickly hacked out fully-equivalent Groovy version of the code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">GroovyExample</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="kd">static</span> <span class="n">def</span> <span class="n">getSrmMetaClassIdListGroovy</span><span class="o">(</span><span class="n">def</span> <span class="n">businessActivityBinMetaClassList</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">businessActivityBinMetaClassList</span><span class="o">?.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">it</span><span class="o">?.</span><span class="na">srmMetaClass</span><span class="o">?.</span><span class="na">srmMetaClassId</span> <span class="o">}.</span><span class="na">findAll</span> <span class="o">{</span> <span class="n">it</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">}</span> <span class="o">?:</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Long</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Whew! Much nicer. What did we get out of this? Well...</p>

<ul>
<li><p>Groovy's dynamic typing cleaned up all of the unnecessary type declarations - the only static typing is where we return an empty ArrayList of Longs if the argument to our method is null (a bit of odd behavior, but required to make this code equivalent to the parent Java code.</p></li>
<li><p>We were saved 4 painful null checks by the use of Groovy's null safe dereferencing operator (?.) and the simplified ternary operator otherwise affectionately known as the "Elvis Operator" (?:).</p></li>
<li><p>Using Groovy's collect method, we were able to transform the original list into a list containing Long values by passing in a closure that pulls out the property value of interest.</p></li>
<li><p>Because we're using null safe dereferencing, we are actually inserting nulls into our list if any of the dereferencing fails. Therefore, Groovy's findAll Collection filtering method comes to the rescue. We simply provide it with a closure that returns true for all of the values we want to keep - in this case, "it != null."</p></li>
<li><p>Perhaps most importantly, we've shorted our code from 11 lines (including whitespace lines for clarity) to ONE LINE that much more clearly expresses the intent of the code.</p></li>
</ul>


<p>Great - why don't we just rewrite the entire application is Groovy? Well, hold on just a minute. At the time we started this application, as much as some of us loved Groovy, we just didn't have enough Groovy mindshare to go there yet. On top of that, we were already experimenting with several new architectural ideas and technologies, and Groovy would have added yet one more risk to the puzzle. I say all this to acknowledge that sometimes you just can't move to another language for one reason or another, regardless of how attractive its features may be.</p>

<p>But let's take a queue from the <em>Pragmatic Programmer</em> and explore the LOTY (Language of the Year) concept one more time. One of the reasons that you're encouraged to learn new languages is to change the way you program in your main language. You may learn Groovy, Scala, Clojure, Ruby, etc., etc., etc. and never use them in your day job - and yet the experience of coding in a new language with new constructs and idioms will necessarily change the way you THINK about programming in every other language.</p>

<p>So, let's think about the possibility of coding something that is much more similar to the Groovy version and yet stick with regular Java code. Fortunately, there are several libraries out there that bring much of the flavor and power of Groovy's closure iterators to Java. I'd like to focus in on one of them, LambdaJ (<a href="http://code.google.com/p/lambdaj/">http://code.google.com/p/lambdaj/</a>).</p>

<p>LambdaJ provides constructs that allow us to "...manipulate collections in a pseudo-functional and statically typed way." Let's take a look at this example implementing using LambdaJ:</p>

<p>``` java
//...some imports excluded for clarity
import ch.lambdaj.function.convert.Converter
import static ch.lambdaj.Lambda.<em>
import static org.hamcrest.Matchers.</em></p>

<p>public class BusinessActivityBinMetaClassHelper {
//...
   public static List<Long> getSrmMetaClassIdListJava(List<BusinessActivityBinMetaClass> businessActivityBinMetaClassList) {</p>

<pre><code>  return (businessActivityBinMetaClassList != null) ? filter(notNullValue(),convert(businessActivityBinMetaClassList, new IdExtractor())) : new ArrayList&lt;Long&gt;();
</code></pre>

<p>   }</p>

<p>   class IdExtractor implements Converter&lt;BusinessActivityBinMetaClass,Long> {</p>

<pre><code>Long convert(BusinessActivityBinMetaClass from) {
   if (from.getSrmMetaClass() != null &amp;&amp; from.getSrmMetaClass().getSrmMetaClassId() != null) {
      return from.getSrmMetaClass().getSrmMetaClassId();
   }
</code></pre>

<p>   }
}
```</p>

<p>Not quite as nice as the Groovy code - we got A LOT out of the null-safe dereference and Elvis operators. However, our overall intent is still a bit clearer. Let's analyze:</p>

<ul>
<li><p>First we need to implement one of LambdaJ's Converters. A Converter is nothing more than a generic Interface that defines one method: T convert(F from), where F is the type we're converting from and T is the type we're converting to. In this case, we want to convert an object of type BusinessActivityBinMetaClass to an object of type Long. Our implementation determines how this conversion takes place, in this case by extracting the id property from its child.</p></li>
<li><p>Next, after statically importing the methods of ch.lambdaj.Lambda, we call the convert method, passing it our List and our newly implemented Converter. This gives us the equivalent of Groovy's collect method, with the Converter taking the place of the closure.</p></li>
<li><p>We're still shoving nulls into our List with this implementation, so we further filter our list using LambdaJ's "filter" method, passing it the list returned by "filter," and a <a href="http://code.google.com/p/hamcrest/">Hamcrest</a> matcher that returns only notNullValue()'s.</p></li>
<li><p>Finally, we use our old friend the ternary operator to return the empty ArrayList of Long values if our method argument is null.</p></li>
</ul>


<p>If you don't count the Converter implementation, we've gotten ourselves down to 2 lines of code (1 if you don't mind long lines). In this case I implemented IdExtractor as a named inner class - you could do this with an anonymous inner class and it would look a lot more like a closure, but the added noise of all of the null checking made the undesirable for me. Perhaps if your code has less noise (or guarantees that values aren't null), that would be a better approach.</p>

<p>Another alternative is to make IdExtractor a top-level class that, if general enough, could be reused throughout the codebase. The benefit of this is that you now have a nice code unit rather than a battery of static methods in a utility class, and unit testing becomes much more clean and elegant.</p>

<p>So, we've still made some progress and made our code a bit more Groovy. I encourage you to explore LambdaJ's feature set and see how it might make your code a bit more concise with clearer intent. And just to stir up a little controversy, look what would have happened in Java 7 had the null safe dereference and Elvis operator's made <a href="http://blogs.sun.com/darcy/entry/project_coin_final_five">the Project Coin cut</a>:</p>

<p>``` java
//...some imports excluded for clarity
import ch.lambdaj.function.convert.Converter
import static ch.lambdaj.Lambda.<em>
import static org.hamcrest.Matchers.</em></p>

<p>public class BusinessActivityBinMetaClassHelper {
//...
   public static List<Long> getSrmMetaClassIdListLambdaJ(List<BusinessActivityBinMetaClass> businessActivityBinMetaClassList) {</p>

<pre><code>  return filter(notNullValue(),convert(businessActivityBinMetaClassList,
     new Converter&lt;BusinessActivityBinMetaClass,Long&gt; {
        Long apply(BusinessActivityBinMetaClass from) { return from?.getSrmMetaClass()?.getSrmMetaClassId()}
     })) ?: new ArrayList&lt;Long&gt;();
</code></pre>

<p>   }
}
```</p>

<p>Nice, huh? ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I've "forked" the Grails PayPal Plugin...]]></title>
    <link href="http://mattstine.com/2009/05/02/ive-forked-the-grails-paypal-plugin/"/>
    <updated>2009-05-02T00:59:46-05:00</updated>
    <id>http://mattstine.com/2009/05/02/ive-forked-the-grails-paypal-plugin</id>
    <content type="html"><![CDATA[<p>I'm currently completing the finishing touches on a new e-commerce site for my wife's stationary business. We decided a long time ago to use <a href="http://www.paypal.com">PayPal</a> for all of the payment processing since we've had a great experience using it for our eBay selling. About a year ago Graeme Rocher polished off the last release of a <a href="http://grails.org/plugin/paypal">PayPal plugin</a> that is available in <a href="http://grails.org/plugin/home">the Grails Plugin repository</a>. It really is a very nice plugin, yet I had a couple of problems with it:</p>

<ul>
<li><p>It is only capable of handling payments for one item transactions via "Buy Now" buttons. I want to upload an entire shopping cart full of multiple items.</p></li>
<li><p>It currently won't handle shipping addresses. The site I'm building allows the user to maintain a list of shipping addresses, and I'd want to send the address information they choose along to PayPal.</p></li>
<li><p>Minor issue: needed to upgrade the plugin to Grails 1.1.</p></li>
</ul>


<p>So, I decided this evening to fork the plugin. I want to leverage all of the great work that has been done thus far (especially with the IPN processing part - superb stuff), but I have to add in these two functions and do the version upgrade. Interestingly enough I couldn't get the tests to run out of the box after the upgrade. No good developer likes to modify code without a stable running test suite, right? So what I ended up doing was creating a new Grails 1.1 plugin project and copying the original artifacts over. Once this was done all of the tests ran perfectly.</p>

<p>So, at this point I've added function #1. You can now redirect to the "uploadCart" action. It assumes that you have already constructed a Payment object (now containing PaymentItems) and saved it, and then passed the transactionId along. I did this so that folks with multiple different ways of handling shopping carts could have some degree of flexibility - the onus is on you to map your cart to your Payment object correctly. The original functions implemented by Graeme are backward compatible, assuming only one PaymentItem in the Payment. I've run all of the original tests and also did some manual functional testing by running the plugin app against my own PayPal Sandbox account. So far so good. Look for more updates as this evolves. Once I get something I'm totally happy with I'll see about getting it pushed back into the main plugin repo.</p>

<p>Want to take a closer look? Visit <a href="http://github.com/mstine/grails-paypal-plugin/tree/master">http://github.com/mstine/grails-paypal-plugin/tree/master</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joel's BuilderBuilder in Groovy]]></title>
    <link href="http://mattstine.com/2009/04/27/joels-builderbuilder-in-groovy/"/>
    <updated>2009-04-27T21:54:07-05:00</updated>
    <id>http://mattstine.com/2009/04/27/joels-builderbuilder-in-groovy</id>
    <content type="html"><![CDATA[<p><a href="http://joelneely.wordpress.com/">Joel Neely</a> started <a href="http://joelneely.wordpress.com/2009/04/25/builderbuilder-the-agenda/">a series</a> <a href="http://joelneely.wordpress.com/2009/04/27/builderbuilder-the-task/">of posts</a> over the weekend detailing a proposed exploration of what Functional Programming means "to me as a practicing OO software developer?" The task at hand is to look at the generation of Data Transfer Objects which include a static inner class that functions as a builder. Since I'm exploring both Clojure and Scala right now, Joel has asked me to play along.</p>

<p>After reading the task definition today, I couldn't resist taking a crack at the problem in Groovy, especially since tackling a Builder DSL is not something I've gone after before.</p>

<p>So, here's how I'll use my DTOBuilder to produce the output Joel described:</p>

<p>``` java <br/>
def bldr = new DtoBuilder()</p>

<p>println bldr.build {</p>

<pre><code>packageName 'edu.bogusu.registration'
name 'Student'
field(name:'id', type:'String')
field(name:'firstName', type:'String')
field(name:'lastName', type:'String')
field(name:'hoursEarned', type:'int')
field(name:'gpa', type:'float')
</code></pre>

<p>}
```</p>

<p>Pretty concise, eh? <a href="http://github.com/mstine/BuilderBuilder/blob/1008235f88177910eb94af165ade3aedae2955a3/src/DtoBuilder.groovy">Check out the implementation of it at GitHub</a>. I'll be posting all of my code related to this series at this location (and hopefully Joel will join in as well).</p>

<p>One thing you'll notice is that I'm still operating primarily in OO style. My next task is to refactor this code, still written in Groovy, but using as much functional-style as I can squeeze out of the language. Until next time...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy: Post to a URL]]></title>
    <link href="http://mattstine.com/2009/04/25/groovy-post-to-a-url/"/>
    <updated>2009-04-25T23:09:11-05:00</updated>
    <id>http://mattstine.com/2009/04/25/groovy-post-to-a-url</id>
    <content type="html"><![CDATA[<p>If you've ever worked with the brilliant <a href="http://recaptcha.net/">Recaptcha</a> service, you'll know that their REST API requires an HTTP POST rather than a GET. As I had only used GET requests thus far, I googled around and found a pretty easy solution:</p>

<pre><code>private def evaluateCaptcha(def remoteIp, def challenge, def response) {
    def config = recaptchaService.getRecaptchaConfig()

    def urlString = "http://api-verify.recaptcha.net/verify"
    def queryString = "privatekey=${config.recaptcha.privateKey}&amp;remoteip=${remoteIp}&amp;challenge=${challenge}&amp;response=${URLEncoder.encode(response)}"

    def url = new URL(urlString)
    def connection = url.openConnection()
    connection.setRequestMethod("POST")
    connection.doOutput = true

    def writer = new OutputStreamWriter(connection.outputStream)
    writer.write(queryString)
    writer.flush()
    writer.close()
    connection.connect()

    def recaptchaResponse = connection.content.text
    log.debug(recaptchaResponse)

    recaptchaResponse.startsWith("true")
}
</code></pre>

<p>I have to credit <a href="http://www.fiascode.com/programming/putting-google-finance-to-rest-with-groovy/">Justin Spradlin</a> for the code that ultimately got me here. Consider this a +1.</p>
]]></content>
  </entry>
  
</feed>
