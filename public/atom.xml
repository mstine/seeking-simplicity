<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seeking Simplicity]]></title>
  <link href="http://mattstine.com/atom.xml" rel="self"/>
  <link href="http://mattstine.com/"/>
  <updated>2014-07-02T16:08:09-05:00</updated>
  <id>http://mattstine.com/</id>
  <author>
    <name><![CDATA[Matt Stine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WIP Microservices Reading List]]></title>
    <link href="http://mattstine.com/2014/07/02/wip-microservices-reading-list/"/>
    <updated>2014-07-02T13:22:00-05:00</updated>
    <id>http://mattstine.com/2014/07/02/wip-microservices-reading-list</id>
    <content type="html"><![CDATA[<div class="paragraph">
<p>I&#8217;ve started curating a <a href="http://mattstine.com/microservices">Microservices Reading List</a>. It&#8217;s still work in progress, but there&#8217;s some good stuff there. Watch for more!</p>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservices are SOLID]]></title>
    <link href="http://mattstine.com/2014/06/30/microservices-are-solid/"/>
    <updated>2014-06-30T17:00:00-05:00</updated>
    <id>http://mattstine.com/2014/06/30/microservices-are-solid</id>
    <content type="html"><![CDATA[<div class="quoteblock abstract">
<blockquote>
<div class="paragraph">
<p><a href="http://martinfowler.com/articles/microservices.html">Microservices</a> are often described as small, loosely coupled applications that follow the UNIX philosophy of &#8220;doing one thing well.&#8221; They have also <a href="http://www.infoq.com/articles/microservices-intro">been related</a> to the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>, the first of the five principles making up <a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>. A microservices-based architecture is typically constructed around a set of common patterns. This set of patterns is actually consistent with all of the SOLID principles when thought of at the architectural rather than the class/module level. In this article, we&#8217;ll gain an understanding of each of the SOLID principles and how they relate to microservices.</p>
</div>
</blockquote>
</div>
<div class="sect1">
<h2 id="a-solid-architecture">A SOLID Architecture?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>I have spent a significant portion of the last three years speaking and writing about the SOLID principles of object-oriented design.
I spent the first year teaching SOLID much as expressed by Robert C. &#8220;Uncle Bob&#8221; Martin in his foundational book, <em><a href="http://www.amazon.com/Software-Development-Principles-Patterns-Practices/dp/0135974445">Agile Software Development: Principles</a></em>.
About the same time I was embarking on a reintroduction to and exploration of functional programming, spending a significant amount of time with <a href="http://clojure.org">Clojure</a>.
Retraining my mind for functional thinking while simultaneously teaching the SOLID principles resulted in a perfect thought storm in my mind, resulting in the following question:</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Is there an overlap between functional programming and the SOLID principles?</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The thought journey that followed led me to start giving the talk entitled &#8220;Functional SOLID&#8221; on August 25, 2012.
That same month I began publishing a <a href="https://nofluffjuststuff.com/m/article/functional_solid_part_1">four-part</a> <a href="https://nofluffjuststuff.com/m/article/functional_solid_part_2">series</a> <a href="https://nofluffjuststuff.com/m/article/functional_solid_part_3">of</a> <a href="https://nofluffjuststuff.com/m/article/functional_solid_part_2">articles</a> by the same name.
In both of these presentations of my ideas, I related a couple of foundational memes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Functional programming, especially within the Clojure programming language, provides wonderful constructs for building programs consistent with the SOLID principles.</p>
</li>
<li>
<p>The SOLID principles actually transcend all of programming, regardless of the particular programming paradigm (structured, object-oriented, functional) employed.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>It is this second meme that provides the impetus for this particular article.
At the conclusion of both presentations, I refer to Rich Hickey&#8217;s seminal Strange Loop keynote, <a href="http://www.infoq.com/presentations/Simple-Made-Easy">&#8220;Simple Made Easy&#8221;</a>.
In his presentation, Hickey decries our continual conflation of the ideas of simplicity and ease by tracing the origins of both words:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Simple, from the Latin <em>simplex</em>, meaning &#8220;one fold or braid&#8221; (opposed to <em>complex</em>, meaning &#8220;many folds or braids,&#8221;) is an objective concept.
In software we can relate it to the degree of interleaving of concerns in software components.</p>
</li>
<li>
<p>Easy, from the Latin <em>adjacens</em>, means &#8220;to lie near.&#8221; While &#8220;hard&#8221; does not trace to a root meaning &#8220;to lie far,&#8221; we can still understand that &#8220;easy&#8221; is a relative concept.
What lies near, or is easy to me, is not necessarily easy or near to you.
In software we can relate it to the programming languages, paradigms, framweworks, technologies, etc. with which we are intimately familiar.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This analysis led me to restate the SOLID principles in terms of another Rich Hickey word, <em>complectedness</em>, or the degree to which software concerns are interleaved:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">Single Responsibility Principle</dt>
<dd>
<p>Complecting responsibilities leads to rigid and/or fragile design.</p>
</dd>
<dt class="hdlist1">Open-Closed Principle</dt>
<dd>
<p>Complecting concretions of an abstraction in such a way that new concretions adversely affect existing, working concretions is problemmatic.</p>
</dd>
<dt class="hdlist1">Liskov Substitution Principle</dt>
<dd>
<p>Reuse via inheritance is dangerous.
It often complects entities not in a true “is-a” relationship, which leads to non-substitutability.</p>
</dd>
<dt class="hdlist1">Interface Segregation Principle</dt>
<dd>
<p>Don’t complect clients with uninteresting operations by complecting unrelated groups of operations in a single entity!</p>
</dd>
<dt class="hdlist1">Dependency Inversion Principle</dt>
<dd>
<p>Transitive dependency leads to transitive complectedness!</p>
</dd>
</dl>
</div>
<div class="paragraph">
<p>As you can see, we&#8217;ve now stated the principles independently of any programming-paradigm specific language.
It is this restatement that cemented in my mind the idea that SOLID actually transcends all of software engineering&#8201;&#8212;&#8201;software engineering principles that are <em>universally true</em>, regardless of the context in which they are applied.
So, we can easily walk these principles up the abstraction ladder into the world of architecture.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="microservices-introduced">Microservices Introduced</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With businesses built around software now disrupting multiple industries that appeared to have stable leaders, the need has emerged for enterprises to create &#8220;software factories&#8221; built around the following principles:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Streaming customer feedback directly into rapid, iterative cycles of application development;</p>
</li>
<li>
<p>Horizontally scaling applications to meet user demand;</p>
</li>
<li>
<p>Compatibility with an enormous diversity of clients, with mobility (smartphones, tablets, etc.) taking the lead;</p>
</li>
<li>
<p>Continuous delivery of value, shrinking the cycle time from concept to cash.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Infrastructure has taken the lead in adapting to meet these needs with the move to the cloud, and Platform as a Service (PaaS) has raised the level of abstraction to a focus on an ecosystem of applications and services.
However, most applications are still developed as if we&#8217;re living in the previous generation of both business and infrastructure: the monolithic application.
Microservices&#8201;&#8212;&#8201;small, loosely coupled applications that follow the Unix philosophy of &#8220;doing one thing well&#8221;&#8201;&#8212;&#8201;represent the application development side of enabling rapid, iterative development, horizontal scale, polyglot clients, and continuous delivery.
They also enable us to scale application development and eliminate long term commitments to a single technology stack.</p>
</div>
<div class="paragraph">
<p>I won&#8217;t belabor the introduction to microservices anymore, as a wealth of reading is already available all over the web.
As a jumping off point, I invite the reader to dive into James Lewis&#8217; and Martin Fowler&#8217;s <a href="http://martinfowler.com/articles/microservices.html">excellent coverage of the topic</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="solid-microservices">SOLID Microservices</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s now get to the heart of the matter: how do the patterns associated with a microservices architecture overlap with the SOLID principles?
Let&#8217;s walk through each, briefly relating them in their natural context, and then swinging them into our microservices discussion.</p>
</div>
<div class="sect2">
<h3 id="single-responsibility-principle">Single Responsibility Principle</h3>
<div class="paragraph">
<p>The Single Responsibility Principle (SRP) is stated by Martin as &#8220;each software module should have one and only one reason to change&#8221; <a href="#SRP">[SRP]</a>.
Of all of the SOLID principles, the SRP is the one I&#8217;ve <a href="http://byterot.blogspot.com/2014/04/reactive-cloud-actors-no-nonsense-microservice-beehive-restful-evolvable-web-events-orleans-framework.html">most</a> <a href="http://www.slideshare.net/joshlong/microservices-with-spring-boot">often</a> <a href="http://www.tigerteam.dk/2014/microservices-its-not-only-the-size-that-matters-its-also-how-you-use-them-part-4/">seen</a> cited in the context of microservices.</p>
</div>
<div class="paragraph">
<p>One common thread between how Martin relates SOLID and microservices is <em>change</em>.
Change in software is inevitable and constant. Requirements are realized as responsibilities doled out to various software modules.
Requirements change leads to changes in responsibilities.
If we couple responsibilities in a single module, then change to one responsibility can affect another unrelated responsibility simply due to its location.
In other words, change one thing, sometimes another unrelated thing breaks.
Risk goes up; change velocity goes down.</p>
</div>
<div class="paragraph">
<p>A monolithic architecture, no matter how modular on the inside, couples responsibilities together.
Change cycles are coupled, increasing the risk associated with frequent deployments.
Effective continuous delivery is far more difficult, as the release management process reimposes the waterfall process on the agile development team.
If we instead separate architectural responsibilities into different microservices, we can decouple those change cycles, thus decreasing the risks associated with frequent deployments. Continuous delivery becomes more easily attainable.</p>
</div>
<div class="paragraph">
<p>The most common technique I&#8217;ve seen applied to decomposing a monolith into microservices is the <a href="http://martinfowler.com/bliki/BoundedContext.html">bounded context</a> from <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a>.
We identify discrete business capabilities, each of which owns and governs its own discrete segment of the overall data model for an organization.
A microservice implements each business capability, encapsulating its data segment behind an often RESTful API.
Overlaps between the capabilities (e.g. a shipping service and ordering service will both likely have the notion of customer, likely governed by a customer service) are realized by mappings in higher-order microservices or by utilizing hypermedia.</p>
</div>
</div>
<div class="sect2">
<h3 id="open-closed-principle">Open-Closed Principle</h3>
<div class="paragraph">
<p>The Open-Closed Principle (OCP), first coined by Bertrand Meyer <a href="#OOSC">[OOSC]</a>, states that &#8220;software entities should be open for extension, but closed for modification.&#8221;
Again we relate this principle to change.
We should be able to change what a module does as software requirements change, but we should be able to do so without modifying any existing, working code.</p>
</div>
<div class="paragraph">
<p>At face value this looks impossible.
How can we change the behavior of a module without changing its code?
The key is in how we define the facade of the module, thinking at the appropriate level of abstraction.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s draw an example from Java&#8217;s standard library.
What if my client code is provided an instance of <code>java.util.HashMap</code>, and I instead want sorted keys?
I would need to not only provide an instance of <code>java.util.TreeMap</code> to my client, but I would also need to change all of the existing references.
If I instead refer to the map abstraction as <code>java.util.Map</code> (a Java interface), then I can provide my client with the new <code>Map</code> type without changing any code.
By utilizing the appropriate module facade, we can decouple an abstraction from the its larger set of derivative behaviors.</p>
</div>
<div class="paragraph">
<p>What is our microservice facade?
The API of course! As long as a given microservice continues to fulfill the contract expressed by its API, it should be possible to swap in new behaviors without changing any existing client code.
This becomes supremely important when we consider the term of our commitment to a particular technology stack. Monolithic architectures are not closed to this particular type of modification, and the risk of incorporating new technology into an existing monolith can be very high.
Microservices drastically reduce the risk associated with experimenting, even in production, with new technology stacks, and increase our ability to use the right tool for the job.</p>
</div>
<div class="paragraph">
<p>Another important technique enabled by the open-closed nature of microservices is <a href="http://martinfowler.com/bliki/PolyglotPersistence.html">polyglot persistence</a>.
By encapsulating the data store technology used for a particular business capability behind its facade (e.g. a recommendations service is very amenable to graph databases), we can hide the presence of that data store behind a microservice API.
This enables us to both experiment with and utilize various data stores in advantageous contexts without polluting the overall service ecosystem with the semantics of each store.</p>
</div>
</div>
<div class="sect2">
<h3 id="liskov-substitution-principle">Liskov Substitution Principle</h3>
<div class="paragraph">
<p>The Liskov Substitution Principle (LSP) was born the same year as Meyer&#8217;s OCP, written down by Barbara Liskov.
The LSP is concerned with types and subtypes, focused on the idea that &#8220;subtypes must be substitutable for their base types.&#8221;
In object-oriented terms, drawing again from the Java language, if a class <code>extends</code> from a parent class or <code>implements</code> a parent interface, we should be able to use that class in the context of any code expecting an instance of the parent.
If at any time that code context exhibits aberrant behavior, we have violated the LSP with our class.</p>
</div>
<div class="paragraph">
<p>Extending the idea of object-oriented inheritance to logical architecture is a bit of a stretch, but let&#8217;s give it a try.
We&#8217;ll start by again considering the microservice&#8217;s facade, or its API.
From the client&#8217;s perspective, the API represents the &#8220;base type&#8221; for our microservice.
So long as any microservice we swap in properly fulfills this API, we can say it&#8217;s consistent with the LSP.</p>
</div>
<div class="paragraph">
<p>It&#8217;s unlikely that we&#8217;ll often substitute different implementations of the same API at runtime, and it&#8217;s unclear to me what a child microservice might look like.
However, consider the case of services that implement the same API, but that must implement different business rules or policies given the legal jurisdiction governing the data.
Further, consider that regulatory compliance dicates that those services actually are deployed and run in the same geographic location governed by that legal jurisdiction.
We could implement each instance of this API as a separate microservice and deploy each of them in the appropriate geography.
From the client&#8217;s perspective, the substitution would be transparent (thus abiding by the LSP), and the &#8220;polymorphic&#8221; substitution could be performed by another higher-order microservice or global site-selection mechanism.</p>
</div>
</div>
<div class="sect2">
<h3 id="interface-segregation-principle">Interface Segregation Principle</h3>
<div class="paragraph">
<p>The Interface Segregation Principle (ISP) is stated in Martin&#8217;s book as &#8220;clients should not be forced to depend on methods they do not use.&#8221;
Martin introduces the concept of so-called &#8220;fat interfaces,&#8221; or interfaces whose method set is not cohesive.
One can divide their method sets into multiple groups, each group serving a different set of interested clients.
The primary reason for seeking to separate these groups into different modules is to prevent change driven by one set of clients from affecting other distinct groups of clients.</p>
</div>
<div class="paragraph">
<p>API&#8217;s implemented via monolithic architectures cannot abide by the ISP.
Adding or improving capabilities to serve one group of clients must involve minimally a redeployment of all of the capabilities affecting all clients.
More likely, a lengthy regression test phase will also be required, as we must ensure that these additional or improved capabilities have not damaged the system&#8217;s other capabilities.</p>
</div>
<div class="paragraph">
<p>Microservices, when designed well around bounded contexts, also abide by the ISP, as we enforce a hard boundary between interfaces by separating them into discrete, independently deployable units.</p>
</div>
</div>
<div class="sect2">
<h3 id="dependency-inversion-principle">Dependency Inversion Principle</h3>
<div class="paragraph">
<p>The Dependency Inversion Principle (DIP) tells us that &#8220;abstractions should not depend upon details. Details should depend upon abstractions.&#8221;
Stated another way, &#8220;high-level modules should not depend on low-level modules.&#8221;
Our abstractions, or higher-level modules, are what codify the important business knowledge inherent in a body of software, whereas our details, or lower-level modules, represent the mechanical recipes for carrying them out.
One of the promises of the other principles is the ability to &#8220;swap out&#8221; the details beneath the abstractions when it becomes advantageous.
However, when our higher-level modules have direct dependency on our lower-level modules, swapping out details often causes the abstraction itself to have to change.
&#8220;Absurd&#8221; is Uncle Bob&#8217;s description of this situation.</p>
</div>
<div class="paragraph">
<p>The DIP typically deals with this scenario by defining <em>service interfaces</em> for each module.
If a module requires services that are not relevant to its bounded context, rather than implementing them itself or directly delegating to a dependency, it instead declares a <em>signature</em> for that service within its service interface.
This interface then becomes a secondary abstraction expressing all of the collaboration a module intends to do.
Possible collaborators then cooperate with the module by implementing its service interface.
In this way, they become <em>dependent</em> on the module, rather than the module becoming dependent on the collaborator!</p>
</div>
<div class="paragraph">
<p>In a microservices architecture, the DIP finds its realization in the <em>API Gateway</em> pattern.
An API Gateway acts as a single point of entry into a microservices architecture for a given client.
It plays a multi-faceted role in serving the diverse clients (i.e. disparate mobile device platforms) of the architecture by:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>reducing the chattiness of the network by reducing the number of services consulted;</p>
</li>
<li>
<p>performing protocol translation (e.g. AMQP to HTTP) when a particular protocol is not well supported by the client;</p>
</li>
<li>
<p>aggregating service responses concurrently to reduce response latency;</p>
</li>
<li>
<p>transforming service responses to service the needs of specific devices, screen sizes, and use cases.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The important thing to note is that the &#8220;API&#8221; defined by the API Gateway is owned by the client in much the same way as the <em>service interface</em> is owned by a higher-level module. In this way, we invert the dependency between clients and the microservices themselves.
Consult <a href="http://techblog.netflix.com/2013/01/optimizing-netflix-api.html">&#8220;Optimizing the Netflix API&#8221;</a> for a fantastic example of this architectural pattern.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Experience has taught me that ease is often cheap but illusory, but that simplicity is a pearl of great price.
Microservices <a href="http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html">are not easy</a>, but they are simple.
One of the reasons for their simplicity is what I see as their strong compatibility with the SOLID principles, not only of object-oriented design, but of all of software engineering.
By resisting the temptation to interleave distinct business capabilities, we retain the ability to develop and deploy them in an agile manner.
I hope you&#8217;ve found some value in this article, and I even hope you&#8217;ve found some things with which you disagree.
Please sound off in the blogosphere, the Twitterverse, or wherever suits your fancy.</p>
</div>
<div class="paragraph">
<p>Cheers!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="references">References</h2>
<div class="sectionbody">
<div class="ulist bibliography">
<ul class="bibliography">
<li>
<p><a id="OOSC"></a>[OOSC] Meyer, Bertrand (1988). <em>Object-Oriented Software Construction</em>.</p>
</li>
<li>
<p><a id="SRP"></a>[SRP] Martin, Robert C. &#8220;The Single Responsibility Principle.&#8221; <a href="http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html">http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html</a></p>
</li>
</ul>
</div>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOSH and Cloud API Compatibility]]></title>
    <link href="http://mattstine.com/2013/08/02/bosh-and-cloud-api-compatibility/"/>
    <updated>2013-08-02T16:10:00-05:00</updated>
    <id>http://mattstine.com/2013/08/02/bosh-and-cloud-api-compatibility</id>
    <content type="html"><![CDATA[<p>The gauntlet has again been dropped in the world of cloud interoperability. The dueling factions include those asserting that competitors to Amazon&#8217;s web services (principally OpenStack) must adopt AWS&#8217;s API&#8217;s in order to remain viable, and those that believe such &#8220;API cloning&#8221; will do nothing more than stunt innovation. If you were to ask me, I&#8217;d say that we&#8217;ve seen this play out before. Remember the &#8220;Clone Wars&#8221; that began in the late 1980&#8217;s and that persisted for the better part of two decades? A huge cast of competitors battled for the title of &#8220;best PC that&#8217;s not manufactured by IBM.&#8221; How did that play out? For a relatively short period of time, having the best PC &#8220;designed for Microsoft Windows,&#8221; along with the leanest supply chain (see Dell), paved a golden path to victory. And then Steve Jobs returns to Apple, and now better than 50% of the laptops running in the Starbucks in which I&#8217;m writing this blog have a shiny white fruit on their lids. As it turns out, &#8220;going your own way&#8221; can work out awfully well.</p>

<p>But that&#8217;s not the angle I want to take in this discussion. Let&#8217;s dig deeper into what the two sides have to say.</p>

<p>The battle was first renewed with Cloud Scaling CTO Randy Bias&#8217; <a href="http://www.cloudscaling.com/blog/cloud-computing/openstack-aws">Open Letter to the OpenStack Community</a>. Randy adopts the position that full-compatibility with the AWS API&#8217;s is necessary for OpenStack&#8217;s survival. The gist of his argument is that Amazon currently dominates public cloud, supporting this via a comparison between Amazon&#8217;s and Rackspace&#8217;s growth rates since 2009, and that they also &#8220;control the innovation curve&#8221; as they push &#8220;new features into production at a breathtaking pace.&#8221; Furthermore, he asserts that any hope for survival with respect to competing cloud platforms is limited to the hybrid cloud space, providing enterprises with the capability to seamlessly migrate workloads between the public cloud and private, on-premises clouds. Therefore, OpenStack must adopt API compatibility with AWS in order to become the enterprise choice for hybrid cloud.</p>

<p>A few days later, Rackspace&#8217;s &#8220;Startup Liaison Officer&#8221; Robert Scoble responded with his own <a href="https://plus.google.com/+Scobleizer/posts/HQ7Wi4WCQse">Open Letter</a>. Scoble makes some interesting counterpoints, most notably the argument that customers don&#8217;t adopt cloud platforms because of API compatibility with Amazon, but because of the promise of a &#8220;10x improvement&#8221; to their own business. In order to provide such improvements, cloud platform competitors must not shackle themselves to a &#8220;de facto standard&#8221; API, but rather must focus their limited resources on driving those 10x improvements in infrastructure capability.</p>

<p>So by now you must be wondering, whose side am I on? I&#8217;m on the side of innovation. But that doesn&#8217;t necessarily put me in either camp. I think the end goals of both parties are things that we want:</p>

<ul>
<li><strong>Freedom:</strong> the ability to migrate workloads between cloud infrastructure providers without needing to significantly alter the behavior of the workload itself.</li>
<li><strong>Innovation:</strong> the ability to realize capabilities that don&#8217;t exist today that will solve emerging problems (particularly those related to the explosion of generated and archived data).</li>
</ul>


<p>Spending development cycles on API compatibility will certainly slow anyone&#8217;s ability to innovate. And what is API compatibility anyway? I believe that much of the concern rests on the large investment many enterprises have (or believe they will need to create) in bespoke automation written to a particular vendor&#8217;s API. Having recently left a large-scale project that generated thousands of lines of such automation to drive consumption of a particular vendor&#8217;s infrastucture platform, and that was in the near term planning to migrate to another platform, I can tell you that this concern is very real. But simply stating that &#8220;your existing code will work when you target our API&#8221; does not compatibility make. As Amazon continues to deploy new features at their breathtaking pace, how will OpenStack and other platforms keep up?</p>

<p>For API compatibility to be <em>real</em>, a &#8220;technology compatibility kit&#8221; (TCK) is needed. For those in the Java world, TCK&#8217;s are near and dear. Java itself is not a particular implementation, but a standard API that invites competing implementations and innovation. But for any competing implementation to call itself &#8220;Java,&#8221; it must pass the tests contained within the TCK. An AWS TCK is really the only true way to ensure API compatibility. But I think it&#8217;s hard to argue that Amazon has any real business interest in creating and sharing one.</p>

<p>There is another way. Perhaps we should stop creating bespoke automation and rally around a common standard toolkit for managing large-scale cloud application deployments. This toolkit could provide mechanisms for configuration management, orchestration, health management, and rolling upgrades. It could further, as part of its architecture, build an adapter layer between its core components and the underlying infrastructure provider. Plugins could then be developed to provide the toolkit with the ability to manage all of the common infrastructure providers.</p>

<p>Enter BOSH and it&#8217;s Cloud Provider Interface (CPI) layer. BOSH was initially developed as the means of deploying and managing the Cloud Foundry PaaS platform, but it&#8217;s much more generally applicable. BOSH can today deploy any distributed system, <em>unchanged</em>, to any of several popular IaaS providers: VMware vSphere, VMware vCloud Director, Amazon Web Services, and OpenStack. Heresy you say! Not so. Just ask Colin Humphreys of CloudCredo, who recently <a href="http://blog.cloudfoundry.com/2013/04/30/uk-charity-raises-record-donations-powered-by-cloud-foundry">described their wildly successful deployment</a> of Cloud Foundry to a hybrid composition of vSphere and AWS-based clouds. He recently presented a technical deep dive in Pivotal&#8217;s offices in which he made the statement (paraphrasing) &#8220;I took the same Cloud Foundry bits that were running on AWS and deployed them unchanged to vSphere using BOSH.&#8221; As anyone can tell, this isn&#8217;t just theory, it&#8217;s production.</p>

<p>So how then does BOSH make this happen? A trip <a href="https://github.com/cloudfoundry/bosh/blob/master/bosh_cpi/lib/cloud.rb">into the code</a> for the BOSH CPI &#8220;interface&#8221; will show a list of core infrastructure capabilities that BOSH requires:</p>

<ul>
<li><code>current_vm_id</code></li>
<li><code>create_stemcell</code></li>
<li><code>delete_stemcell</code></li>
<li><code>create_vm</code></li>
<li><code>delete_vm</code></li>
<li><code>has_vm?</code></li>
<li><code>reboot_vm</code></li>
<li><code>set_vm_metadata</code></li>
<li><code>configure_networks</code></li>
<li><code>create_disk</code></li>
<li><code>delete_disk</code></li>
<li><code>attach_disk</code></li>
<li><code>snapshot_disk</code></li>
<li><code>delete_snapshot</code></li>
<li><code>detach_disk</code></li>
<li><code>get_disks</code></li>
</ul>


<p>All interactions between BOSH and the underlying infrastructure provider pass through these core methods. As long as a CPI exists that exposes these capabilities to BOSH, BOSH can deploy and manage the lifecycle of Cloud Foundry (or any other distributed system described by a BOSH release) on an infrastructure provider.</p>

<p>So how hard is it to provide the CPI&#8217;s for both AWS and OpenStack? If you choose simple metrics like number of classes (NOC) and lines of code (LOC), not that hard.</p>

<p>You can find the CPI implementations at these links:</p>

<ul>
<li><a href="https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi">https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi</a></li>
<li><a href="https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi">https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi</a></li>
</ul>


<p>First we&#8217;ll generate the metrics for AWS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find ./bosh_aws_cpi/lib -name <span class="s2">&quot;*.rb&quot;</span> -exec wc -l <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'>       2 ./bosh_aws_cpi/lib/bosh_aws_cpi.rb
</span><span class='line'>      68 ./bosh_aws_cpi/lib/cloud/aws/aki_picker.rb
</span><span class='line'>      39 ./bosh_aws_cpi/lib/cloud/aws/availability_zone_selector.rb
</span><span class='line'>     651 ./bosh_aws_cpi/lib/cloud/aws/cloud.rb
</span><span class='line'>      22 ./bosh_aws_cpi/lib/cloud/aws/dynamic_network.rb
</span><span class='line'>      30 ./bosh_aws_cpi/lib/cloud/aws/helpers.rb
</span><span class='line'>     171 ./bosh_aws_cpi/lib/cloud/aws/instance_manager.rb
</span><span class='line'>      25 ./bosh_aws_cpi/lib/cloud/aws/manual_network.rb
</span><span class='line'>      37 ./bosh_aws_cpi/lib/cloud/aws/network.rb
</span><span class='line'>      89 ./bosh_aws_cpi/lib/cloud/aws/network_configurator.rb
</span><span class='line'>     189 ./bosh_aws_cpi/lib/cloud/aws/resource_wait.rb
</span><span class='line'>      68 ./bosh_aws_cpi/lib/cloud/aws/stemcell.rb
</span><span class='line'>     114 ./bosh_aws_cpi/lib/cloud/aws/stemcell_creator.rb
</span><span class='line'>      30 ./bosh_aws_cpi/lib/cloud/aws/tag_manager.rb
</span><span class='line'>       7 ./bosh_aws_cpi/lib/cloud/aws/version.rb
</span><span class='line'>      44 ./bosh_aws_cpi/lib/cloud/aws/vip_network.rb
</span><span class='line'>      43 ./bosh_aws_cpi/lib/cloud/aws.rb
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll also want the total LOC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find ./bosh_aws_cpi/lib -name <span class="s2">&quot;*.rb&quot;</span> -exec wc -l <span class="o">{}</span> <span class="se">\;</span> | awk <span class="s1">&#39;{ sum += $1 } END { print sum }&#39;</span>
</span><span class='line'>1629
</span></code></pre></td></tr></table></div></figure>


<p>And now let&#8217;s do the same for OpenStack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find ./bosh_openstack_cpi/lib -name <span class="s2">&quot;*.rb&quot;</span> -exec wc -l <span class="o">{}</span> <span class="se">\;</span>
</span><span class='line'>       4 ./bosh_openstack_cpi/lib/bosh_openstack_cpi.rb
</span><span class='line'>     867 ./bosh_openstack_cpi/lib/cloud/openstack/cloud.rb
</span><span class='line'>      28 ./bosh_openstack_cpi/lib/cloud/openstack/dynamic_network.rb
</span><span class='line'>     131 ./bosh_openstack_cpi/lib/cloud/openstack/helpers.rb
</span><span class='line'>      34 ./bosh_openstack_cpi/lib/cloud/openstack/manual_network.rb
</span><span class='line'>      37 ./bosh_openstack_cpi/lib/cloud/openstack/network.rb
</span><span class='line'>     159 ./bosh_openstack_cpi/lib/cloud/openstack/network_configurator.rb
</span><span class='line'>      16 ./bosh_openstack_cpi/lib/cloud/openstack/tag_manager.rb
</span><span class='line'>       8 ./bosh_openstack_cpi/lib/cloud/openstack/version.rb
</span><span class='line'>      50 ./bosh_openstack_cpi/lib/cloud/openstack/vip_network.rb
</span><span class='line'>      39 ./bosh_openstack_cpi/lib/cloud/openstack.rb
</span><span class='line'><span class="nv">$ </span>find ./bosh_openstack_cpi/lib -name <span class="s2">&quot;*.rb&quot;</span> -exec wc -l <span class="o">{}</span> <span class="se">\;</span> | awk <span class="s1">&#39;{ sum += $1 } END { print sum }&#39;</span>
</span><span class='line'>1373
</span></code></pre></td></tr></table></div></figure>


<p>So, summarizing:</p>

<table>
<thead>
<tr>
<th>CPI        </th>
<th align="right"> Number of Classes (NOC) </th>
<th align="right"> Lines of Code (LOC)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Amazon AWS </td>
<td align="right"> 17                      </td>
<td align="right"> 1629</td>
</tr>
<tr>
<td>OpenStack  </td>
<td align="right"> 11                      </td>
<td align="right"> 1373</td>
</tr>
</tbody>
</table>


<br/>


<p>Let&#8217;s make a couple of points about these metrics. First of all, the two CPI&#8217;s do not use a common foundation. The AWS CPI uses the <a href="http://aws.amazon.com/sdkforruby">AWS SDK for Ruby</a> while the OpenStack CPI uses <a href="http://fog.io">Fog</a>. Fog could also have been used as the foundation for the AWS CPI, but the CPI authors presumably thought it better to stick with the toolkit provided by Amazon. This is a minor point, however, as both of these toolkits essentially provide simple wrappers around the infrastructure providers&#8217; REST API&#8217;s. It&#8217;s doubtful that using a common API wrapper for both CPI&#8217;s would have substantially changed the metrics presented here.</p>

<p>Second, obviously NOC and LOC are rather naive metrics. It&#8217;s incredibly possible to write terse code that is opaque, buggy, and hard to maintain or enhance. In fact, according to Code Climate, both of the top-level implementation classes for these CPI&#8217;s have quite a lot of room for improvement:</p>

<ul>
<li><a href="https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud">https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud</a></li>
<li><a href="https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud">https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud</a></li>
</ul>


<p>With that said, it is rather amazing that one could encapuslate all of the infrastructure-specific implementation necessary to deploy and manage a distributed system as powerful as Cloud Foundry in <em>less than twenty classes and 1700 lines of code</em>.</p>

<p>So, to summarize where we&#8217;ve been, while there&#8217;s an impressive war of words out there regarding API compatibility with Amazon AWS, Cloud Foundry and BOSH don&#8217;t necessarily need to take sides. If OpenStack chooses to embrace the AWS API&#8217;s, the BOSH AWS CPI will be there waiting. However, if OpenStack chooses to follow in the footsteps of Apple and take the road less traveled, the OpenStack CPI is ready and waiting to evolve with it. Should Google Compute Engine or Microsoft&#8217;s Azure gain a foodhold on the innovation curve, they are presumably a relatively simple CPI away from joining the BOSH ecosystem. So if you really want &#8220;cloud freedom,&#8221; BOSH is leading the charge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blue-Green Deployments on Cloud Foundry]]></title>
    <link href="http://mattstine.com/2013/07/10/blue-green-deployments-on-cloudfoundry/"/>
    <updated>2013-07-10T20:10:00-05:00</updated>
    <id>http://mattstine.com/2013/07/10/blue-green-deployments-on-cloudfoundry</id>
    <content type="html"><![CDATA[<p>One of the great things about Cloud Foundry is that it is a great enabler. Tall words. But what do they mean? Essentially, Cloud Foundry (and any other well-designed PaaS) enables us to do things as developers and operators that would be extremely difficult in a traditional deployment environments. One particularly valuable area of enablement is our new found ability to practice <a href="http://continuousdelivery.com/">Continous Delivery</a>, meaning that we continuously prove our ability to deliver working software by continuously treating each code commit to a system as if it could be deployed to a production environment. We do this by shipping these commits through what&#8217;s called a &#8220;deployment pipeline,&#8221; which consists of a series of build-test-deploy cycles that prove out a commit&#8217;s suitability for production deployment. At the end of the pipeline we can either deploy automatically to our production environment (i.e. continuous deployment), or we can have a business decision to deploy that &#8220;deployable artifact&#8221; or not.</p>

<p>One particular practice associated with Continuous Delivery is <a href="http://martinfowler.com/bliki/BlueGreenDeployment.html">Blue-Green Deployments</a>. Martin Fowler describes these very well at the link provided, but I&#8217;ll summarize briefly here:</p>

<ul>
<li>Cut-over to a new software version is tricky, and must be quick in order to minimize downtime events.</li>
<li>Blue-green deployments ensure the parallel existence of two, identical (as possible) production environments.</li>
<li>At any given point, only one (e.g. blue) services production traffic.</li>
<li>New deploys are made to the other (e.g. green) environment. Final smoke testing is performed here.</li>
<li>When green is determined ready, we begin routing traffic to it.</li>
<li>We then stop routing traffic to blue.</li>
</ul>


<p>Of course, there are several concerns that must be dealt with at the application level in order for this to work (datastores should support concurrent usage by two app versions, long running requests may be killed, etc.). What we&#8217;ll focus on in this post is how Cloud Foundry supports the mechanics summarized above.</p>

<p>We&#8217;ll begin with a basic Spring application named <code>ms-spr-demo</code>. This app takes users to a simple web page announcing the ubiquitous &#8220;Hello World!&#8221; message. We&#8217;ll utilize the <code>cf</code> command-line interface to push the application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cf push --path build/libs/cf-demo.war
</span><span class='line'>Name&gt; ms-spr-demo
</span><span class='line'>
</span><span class='line'>Instances&gt; 1
</span><span class='line'>
</span><span class='line'>Memory Limit&gt; 512M
</span><span class='line'>
</span><span class='line'>Creating ms-spr-demo... OK
</span><span class='line'>
</span><span class='line'>1: ms-spr-demo
</span><span class='line'>2: none
</span><span class='line'>Subdomain&gt; ms-spr-demo
</span><span class='line'>
</span><span class='line'>1: cfapps.io
</span><span class='line'>2: mattstine.com
</span><span class='line'>3: none
</span><span class='line'>Domain&gt; 1
</span><span class='line'>
</span><span class='line'>Creating route ms-spr-demo.cfapps.io... OK
</span><span class='line'>Binding ms-spr-demo.cfapps.io to ms-spr-demo... OK
</span><span class='line'>
</span><span class='line'>Create services <span class="k">for </span>application?&gt; n
</span><span class='line'>
</span><span class='line'>Save configuration?&gt; y
</span><span class='line'>
</span><span class='line'>Saving to manifest.yml... OK
</span><span class='line'>Uploading ms-spr-demo... OK
</span><span class='line'>Starting ms-spr-demo... OK
</span><span class='line'>-----&gt; Downloaded app package <span class="o">(</span>9.5M<span class="o">)</span>
</span><span class='line'>Installing java.
</span><span class='line'>Downloading JDK...
</span><span class='line'>Copying openjdk-1.7.0_25.tar.gz from the buildpack cache ...
</span><span class='line'>Unpacking JDK to .jdk
</span><span class='line'>Downloading Tomcat: apache-tomcat-7.0.41.tar.gz
</span><span class='line'>Copying apache-tomcat-7.0.41.tar.gz from the buildpack cache ...
</span><span class='line'>Unpacking Tomcat to .tomcat
</span><span class='line'>Copying mysql-connector-java-5.1.12.jar from the buildpack cache ...
</span><span class='line'>Copying postgresql-9.0-801.jdbc4.jar from the buildpack cache ...
</span><span class='line'>Copying auto-reconfiguration-0.6.8.jar from the buildpack cache ...
</span><span class='line'>-----&gt; Uploading droplet <span class="o">(</span>48M<span class="o">)</span>
</span><span class='line'>-----&gt; Uploaded droplet
</span><span class='line'>Checking ms-spr-demo...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  1/1 instances: 1 running
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>The end result of this <code>cf push</code> event is that an application is now serving requests at <code>http://ms-spr-demo.cfapps.io</code>. The following graphic shows the state of our system, with the CF Router sending traffic to our application:</p>

<p><img class="center" src="http://mattstine.com/images/blue-green/BlueGreen1.png"></p>

<p>Next, we make a slight change to our application. Rather that saying &#8220;Hello World!&#8221; we decide to make it say &#8220;Goodbye World!&#8221; We build a new war file for the application. Rather than letting <code>cf</code> prompt us this time, we&#8217;ll make use of the <code>manifest.yml</code> file that we saved from our previous push. However, we&#8217;ll rename the application and provide a new route. Take a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>applications:
</span><span class='line'>- name: ms-spr-demo-green
</span><span class='line'>  memory: 512M
</span><span class='line'>  instances: 1
</span><span class='line'>  url: ms-spr-demo-green.cfapps.io
</span><span class='line'>  path: build/libs/cf-demo.war
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we&#8217;re calling our new application version <code>ms-spr-demo-green</code> and we&#8217;re mapping it to the URL <code>ms-spr-demo-green.cfapps.io</code>. Let&#8217;s push the application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Using manifest file manifest.yml
</span><span class='line'>
</span><span class='line'>Creating ms-spr-demo-green... OK
</span><span class='line'>
</span><span class='line'>1: ms-spr-demo-green
</span><span class='line'>2: none
</span><span class='line'>Subdomain&gt; ms-spr-demo-green
</span><span class='line'>
</span><span class='line'>1: cfapps.io
</span><span class='line'>2: mattstine.com
</span><span class='line'>3: none
</span><span class='line'>Domain&gt; 1
</span><span class='line'>
</span><span class='line'>Creating route ms-spr-demo-green.cfapps.io... OK
</span><span class='line'>Binding ms-spr-demo-green.cfapps.io to ms-spr-demo-green... OK
</span><span class='line'>Uploading ms-spr-demo-green... OK
</span><span class='line'>Starting ms-spr-demo-green... OK
</span><span class='line'>-----&gt; Downloaded app package <span class="o">(</span>9.5M<span class="o">)</span>
</span><span class='line'>Installing java.
</span><span class='line'>Downloading JDK...
</span><span class='line'>Copying openjdk-1.7.0_25.tar.gz from the buildpack cache ...
</span><span class='line'>Unpacking JDK to .jdk
</span><span class='line'>Downloading Tomcat: apache-tomcat-7.0.41.tar.gz
</span><span class='line'>Copying apache-tomcat-7.0.41.tar.gz from the buildpack cache ...
</span><span class='line'>Unpacking Tomcat to .tomcat
</span><span class='line'>Copying mysql-connector-java-5.1.12.jar from the buildpack cache ...
</span><span class='line'>Copying postgresql-9.0-801.jdbc4.jar from the buildpack cache ...
</span><span class='line'>Copying auto-reconfiguration-0.6.8.jar from the buildpack cache ...
</span><span class='line'>-----&gt; Uploading droplet <span class="o">(</span>48M<span class="o">)</span>
</span><span class='line'>-----&gt; Uploaded droplet
</span><span class='line'>Checking ms-spr-demo-green...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  1/1 instances: 1 running
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>We now have two instances of the application running, each of them using distinct routes:</p>

<p><img class="center" src="http://mattstine.com/images/blue-green/BlueGreen2.png"></p>

<p>Now it&#8217;s time for the magic to happen. We&#8217;ll map our original URL route (<code>ms-spr-demo.cfapps.io</code>) to our &#8220;green&#8221; instance. This is accomplished very simply by using <code>cf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cf map --app ms-spr-demo-green --host ms-spr-demo --domain cfapps.io
</span><span class='line'>Binding ms-spr-demo.cfapps.io to ms-spr-demo-green... OK
</span></code></pre></td></tr></table></div></figure>


<p>The CF router immediately begins to load balance requests between each instance of the application, as shown here:</p>

<p><img class="center" src="http://mattstine.com/images/blue-green/BlueGreen3.png"></p>

<p>Now our router will send requests to <code>ms-spr-demo.cfapps.io</code> to both instances of the application, while <code>ms-spr-demo-green.cfapps.io</code> only services the &#8220;green&#8221; instance. Once we determine that all is well, it&#8217;s time to stop routing requests to the &#8220;blue&#8221; instance. This is just as simple using <code>cf</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cf unmap --url ms-spr-demo.cfapps.io --app ms-spr-demo
</span><span class='line'>Unbinding ms-spr-demo.cfapps.io from ms-spr-demo... OK
</span></code></pre></td></tr></table></div></figure>


<p>Our &#8220;blue&#8221; instance is now no longer receiving any web traffic:</p>

<p><img class="center" src="http://mattstine.com/images/blue-green/BlueGreen4.png"></p>

<p>We can now decomission our &#8220;blue&#8221; instance, or we can leave it around for a period of time in case we decide we need to roll back our changes. The important thing is that our customers suffered absolutely no downtime!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on Cloud Foundry]]></title>
    <link href="http://mattstine.com/2013/05/29/clojure-on-cloud-foundry/"/>
    <updated>2013-05-29T22:10:00-05:00</updated>
    <id>http://mattstine.com/2013/05/29/clojure-on-cloud-foundry</id>
    <content type="html"><![CDATA[<p>I was inspired by Brian McClain&#8217;s <a href="http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/">post on bringing Haskell to Cloud Foundry</a> using Cloud Foundry v2 buildpacks, so I decided to go on a buildpack journey of my own. Since Clojure is the language I most enjoying &#8220;toying around with,&#8221; I thought I&#8217;d try to deploy a simple Clojure web application using the <a href="https://github.com/mstine/heroku-buildpack-clojure">Heroku Clojure Buildpack</a>.</p>

<p>To reiterate some of the coolness around buildpacks, they are what allows a PaaS like Cloud Foundry or Heroku to support various runtimes without first building that support into the core platform. If your favorite language or framework runtime isn&#8217;t available, there&#8217;s absolutely nothing stopping you from providing your own buildpack to support it. Stuff can get crazy &#8211; McClain has even <a href="https://twitter.com/BrianMMcClain/status/339479905974751232">hinted at bringing FORTRAN support to Cloud Foundry</a>.</p>

<p>I decided for my experiment to build a VERY basic &#8220;Hello World&#8221; style application using <a href="https://github.com/ring-clojure/ring">Ring</a>, which is &#8220;a Clojure web applications library inspired by Python&#8217;s WSGI and Ruby&#8217;s Rack.&#8221; The easiest way to get started building Ring applications is to utilize the popular Clojure build tool <a href="http://github.com/technomancy/leiningen">Leiningen</a>.</p>

<p>First I started by creating a new project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lein new hello-cf
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>hello-cf
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The next task was to add the Ring dependencies to my <code>project.clj</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">hello-cf</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:min-lein-version</span> <span class="s">&quot;2.0.0&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;Hello Clojure on Cloud Foundry!&quot;</span>
</span><span class='line'>  <span class="ss">:license</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Eclipse Public License&quot;</span>
</span><span class='line'>            <span class="ss">:url</span> <span class="s">&quot;http://www.eclipse.org/legal/epl-v10.html&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring/ring-core</span> <span class="s">&quot;1.1.8&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring/ring-jetty-adapter</span> <span class="s">&quot;1.1.8&quot;</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then it was time to create the Ring application itself, by editing <code>src/hello_cf/core.clj</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">hello-cf.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">ring.adapter.jetty</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">run-jetty</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">handler</span> <span class="p">[</span><span class="nv">request</span><span class="p">]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span>
</span><span class='line'>   <span class="ss">:headers</span> <span class="p">{</span><span class="s">&quot;Content-Type&quot;</span> <span class="s">&quot;text/html&quot;</span><span class="p">}</span>
</span><span class='line'>   <span class="ss">:body</span> <span class="s">&quot;Hello Cloud Foundry from heroku-buildpack-clojure!&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run-jetty</span> <span class="nv">handler</span> <span class="p">{</span><span class="ss">:port</span> <span class="p">(</span><span class="nf">Integer.</span> <span class="nv">port</span><span class="p">)}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s break this down a bit. The <code>handler</code> function will handle any HTTP request that hits our application, and will return an &#8220;OK&#8221; response containing a pleasant message indicating that we&#8217;ve succeeded. That&#8217;s really about it. Our application is complete. We can test it out by running the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>lein trampoline run -m hello-cf.core 8080
</span><span class='line'>2013-05-29 22:42:52.576:INFO:oejs.Server:jetty-7.6.1.v20120215
</span><span class='line'>2013-05-29 22:42:52.804:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
</span></code></pre></td></tr></table></div></figure>


<p>Hitting <code>http://localhost:8080</code> in the browser confirms that we&#8217;re well on our way. Now it&#8217;s time to trying pushing the application to Cloud Foundry. As Brian stated in his blog, one of the stellar aspects of Cloud Foundry buildpacks is that they are approximately the same as Heroku buildpacks. Practically, this means that one <em>should</em> be able to utilize a Heroku buildpack on Cloud Foundry with minimal or no modifications. Let&#8217;s put that theory to the test, shall we? Before we do, let&#8217;s create a <code>Procfile</code> quickly to let the buildpack know what we want to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: lein with-profile production trampoline run -m hello-cf.core <span class="nv">$PORT</span>
</span></code></pre></td></tr></table></div></figure>


<p>And on with the push:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cf push hello-cf --buildpack<span class="o">=</span>git://github.com/heroku/heroku-buildpack-clojure.git
</span><span class='line'>Using manifest file manifest.yml
</span><span class='line'>
</span><span class='line'>Creating hello-cf... OK
</span><span class='line'>
</span><span class='line'>1: hello-cf
</span><span class='line'>2: none
</span><span class='line'>Subdomain&gt; hello-cf
</span><span class='line'>
</span><span class='line'>1: mstine.cf-app.com
</span><span class='line'>2: none
</span><span class='line'>Domain&gt; mstine.cf-app.com
</span><span class='line'>
</span><span class='line'>Binding hello-cf.mstine.cf-app.com to hello-cf... OK
</span><span class='line'>Uploading hello-cf... OK
</span><span class='line'>Starting hello-cf... OK
</span><span class='line'>-----&gt; Downloaded app package <span class="o">(</span>12K<span class="o">)</span>
</span><span class='line'>Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
</span><span class='line'>Installing heroku-buildpack-clojure.git.
</span><span class='line'>-----&gt; Installing OpenJDK 1.6...done
</span><span class='line'>-----&gt; Installing Leiningen
</span><span class='line'>       Downloading: leiningen-2.1.2-standalone.jar
</span><span class='line'>       Writing: lein script
</span><span class='line'>-----&gt; Building with Leiningen
</span><span class='line'>       Running: lein with-profile production compile :all
</span><span class='line'>       Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.pom from clojars
</span><span class='line'>       Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.jar from clojars
</span><span class='line'>       Performing task <span class="s1">&#39;compile&#39;</span> with profile<span class="o">(</span>s<span class="o">)</span>: <span class="s1">&#39;production&#39;</span>
</span><span class='line'>       Retrieving org/clojure/clojure/1.4.0/clojure-1.4.0.pom from
</span><span class='line'>       ...
</span><span class='line'>       Compiling hello-cf.core
</span><span class='line'>-----&gt; Uploading staged droplet <span class="o">(</span>66M<span class="o">)</span>
</span><span class='line'>-----&gt; Uploaded droplet
</span><span class='line'>Checking hello-cf...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 down
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 flapping
</span><span class='line'>Application failed to start.
</span></code></pre></td></tr></table></div></figure>


<p>Drat. Let&#8217;s take a quick look at the logs to see what may be awry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Reading logs/stderr.log... OK
</span><span class='line'>/home/vcap/app/.lein/bin/lein: line 42: java: <span class="nb">command </span>not found
</span></code></pre></td></tr></table></div></figure>


<p>Ah-hah! Looks like the existing buildpack is making some assumptions about the structure of our application that no longer hold true on Cloud Foundry. So, I followed in Brian&#8217;s footsteps and <a href="https://github.com/mstine/heroku-buildpack-clojure">forked away</a>. One small <a href="https://github.com/mstine/heroku-buildpack-clojure/commit/fd2c46cc23267fa2d808123d2fd58f4295da4b85">commit</a> looks like it ought to fix the problem. Let&#8217;s give it another try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cf push hello-cf --buildpack<span class="o">=</span>git://github.com/mstine/heroku-buildpack-clojure.git
</span><span class='line'>Using manifest file manifest.yml
</span><span class='line'>
</span><span class='line'>Not applying manifest changes without --reset
</span><span class='line'>See <span class="sb">`</span>cf diff<span class="sb">`</span> <span class="k">for </span>more details.
</span><span class='line'>
</span><span class='line'>Uploading hello-cf... OK
</span><span class='line'>Changes:
</span><span class='line'>  buildpack: <span class="s1">&#39;git://github.com/heroku/heroku-buildpack-clojure.git&#39;</span> -&gt; <span class="s1">&#39;git://github.com/mstine/heroku-buildpack-clojure.git&#39;</span>
</span><span class='line'>Updating hello-cf... OK
</span><span class='line'>Stopping hello-cf... OK
</span><span class='line'>
</span><span class='line'>Starting hello-cf... OK
</span><span class='line'>-----&gt; Downloaded app package <span class="o">(</span>8.0K<span class="o">)</span>
</span><span class='line'>-----&gt; Downloaded app buildpack cache <span class="o">(</span>17M<span class="o">)</span>
</span><span class='line'>Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
</span><span class='line'>Installing heroku-buildpack-clojure.git.
</span><span class='line'>-----&gt; Installing OpenJDK 1.6...done
</span><span class='line'>-----&gt; Using cached Leiningen 2.1.2
</span><span class='line'>       Writing: lein script
</span><span class='line'>-----&gt; Building with Leiningen
</span><span class='line'>       Running: lein with-profile production compile :all
</span><span class='line'>       Performing task <span class="s1">&#39;compile&#39;</span> with profile<span class="o">(</span>s<span class="o">)</span>: <span class="s1">&#39;production&#39;</span>
</span><span class='line'>       Compiling hello-cf.core
</span><span class='line'>-----&gt; Uploading staged droplet <span class="o">(</span>66M<span class="o">)</span>
</span><span class='line'>-----&gt; Uploaded droplet
</span><span class='line'>Checking hello-cf...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>Staging in progress...
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  0/1 instances: 1 starting
</span><span class='line'>  1/1 instances: 1 running
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>BOOM!</p>

<p>I quickly pointed my browser, and as yesterday&#8217;s tweet indicates, success:</p>

<blockquote class="twitter-tweet" data-partner="tweetdeck"><p>Yeah&#8230;that just happened. cc: <a href="https://twitter.com/cloudfoundry">@cloudfoundry</a> <a href="https://twitter.com/search?q=%23clojure&amp;src=hash">#clojure</a> <a href="https://twitter.com/search?q=%23buildpacks&amp;src=hash">#buildpacks</a> <a href="https://twitter.com/search?q=%23winning&amp;src=hash">#winning</a> <a href="http://t.co/9lJHqmWQPw">pic.twitter.com/9lJHqmWQPw</a></p>&mdash; Matt Stine (@mstine) <a href="https://twitter.com/mstine/statuses/339248683151417344">May 28, 2013</a></blockquote>


<script async src="http://mattstine.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<p>Score another win for Cloud Foundry&#8217;s buildpack support. I&#8217;m now toying with the idea of doing something of a world tour of LISP on Cloud Foundry. My next candidate may be <a href="https://github.com/evhan/heroku-buildpack-chicken">Scheme</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Into the Crucible]]></title>
    <link href="http://mattstine.com/2013/05/29/into-the-crucible/"/>
    <updated>2013-05-29T09:00:00-05:00</updated>
    <id>http://mattstine.com/2013/05/29/into-the-crucible</id>
    <content type="html"><![CDATA[<p>Wow&#8230;it seems I only post to this blog toward the end of May. Well, that all changes now. You see, as of June 3, 2013, this blog is going to become one of many aspects of my new &#8220;day job.&#8221; On Monday, I start my life as a Community Engineer with <a href="http://cloudfoundry.com">Cloud Foundry</a> by <a href="http://goPivotal.com">Pivotal</a>. What&#8217;s a Community Engineer? Quite honestly, I&#8217;m not completely sure of the answer to that question yet. But given the many conversations I&#8217;ve had over the past few weeks, it seemingly fits right in with the bridge-building roles I&#8217;ve played many times over the course of my career. In this case, I have one foot squarely planted in the world of Cloud Foundry engineering, and one foot squarely planted out in the world with you guys and gals - the community. My job is to help you understand how we are quite literally seeking to &#8220;build a new platform for a new era.&#8221;</p>

<p>Of course, this is a journey that for me started a few years ago. In my previous life as a front-line development manager, I helped lead an agile transformation within my team with &#8220;ruthless automation&#8221; playing a central role in everything that our team did. However, it seemed that the better we &#8220;did agile,&#8221; the more pain we felt when dealing with those outside of our circle of control. It was only years later, after reading Eliyahu Goldratt&#8217;s <a href="http://en.wikipedia.org/wiki/The_Goal_(novel)">The Goal</a> and coming to an understanding of his <a href="http://en.wikipedia.org/wiki/Theory_of_Constraints">Theory of Constraints</a>, that I realized what was happening. Our constraints had moved &#8220;out of the plant,&#8221; if you will, and landed in the world of operations. Even without this understanding, I developed a keen interest in this newly emerging topic called &#8220;DevOps&#8221; and began to explore the ideas emerging around agile operations and infrastructure as code. I started playing with tools like Puppet, Chef, and Vagrant, and taught sessions on all three of them at the Project Automation Experience in 2011.</p>

<p>You can read my <a href="http://www.mattstine.com/2012/05/24/the-relaunch/">last entry</a> and find out that not much later I joined VMware as a Senior Consultant for its Cloud Application Platform. I was hired into that role based on my extensive background in enterprise Java and the Spring ecosystem, but it was nothing short of a staffing accident that I found myself thrust into a role on a virtualization platform provisioning team helping to build out a private self-service cloud! I was steadily getting carried further away from my role as an application architect, steadily becoming assimilated into that mysterious world of web operations that I knew so little about. These experiences, along with my continued reading and thinking about the worlds of DevOps, Lean, and Kanban, have quite literally changed the way I look at the world of software engineering (or as I prefer to think of it now, value delivery through product engineering that just so happens to involve software!). These experiences have formed around me a <a href="http://en.wikipedia.org/wiki/Crucible">crucible</a>, melting me that I might be poured into a new professional mold.</p>

<p>So now it&#8217;s time to plunge into the world of building the leading <a href="http://wattersjames.com/2013/03/04/my-fork-you-shirt/">open</a> platform as a service, and to help YOU experience the <a href="https://twitter.com/mstine/status/339570787914760195">HUGE can of @cloudfoundry awesome</a> that we at Pivotal are about to unleash on the world. Sound good to you? <a href="http://blog.cloudfoundry.com/2013/05/16/want-to-contribute-to-cloud-foundry-come-on-in/">Join us!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Relaunch]]></title>
    <link href="http://mattstine.com/2012/05/24/the-relaunch/"/>
    <updated>2012-05-24T19:45:00-05:00</updated>
    <id>http://mattstine.com/2012/05/24/the-relaunch</id>
    <content type="html"><![CDATA[<p>I have rebooted this blog many times over the last several years. If you&#8217;ve been a reader of my blog in the past, you will have noticed significant changes. If you&#8217;re new here, welcome!</p>

<p>This reboot has been in the works for several months now, even though I&#8217;ve probably spent far less than 24 active hours working on it. Life as an &#8220;itinerant&#8221; consultant and conference speaker is extremely busy compared to what I was doing on May 16, 2012 (the date of my last blog posting). At that time I was in the middle of a transition from 3+ years as a front-line manager of a software development team into a lead software architect role. Since that time I&#8217;ve changed jobs (careers?) twice:</p>

<ul>
<li>June 2011 - February 2012: During this time I was titled as a &#8220;Technical Architect&#8221; at AutoZone&#8217;s corporate offices in Memphis, TN. My focus was the modernization of their retail store management system architecture and technical stack. While there I also did a fair amount of agile coaching.</li>
<li>February 2012 - Present: In January, VMware came calling, wanting to know if I would join the vFabric Cloud Application Platform PSO as a Senior Consultant. After a few weeks of interviews and careful consideration, I made the jump. I&#8217;m now in the midst of helping a Fortune 50 company build a brand new &#8220;private cloud&#8221; hosting platform for their next generation of application development.</li>
</ul>


<p>During that time I also significantly increased my participation on the No Fluff Just Stuff tour. In other words, I&#8217;ve BEEN BUSY.</p>

<p>At any rate, I have for quite awhile now wanted to get back into the practice of writing. However, I&#8217;ve wanted to do so outside the constraints of a hosted platform like Blogger or WordPress.com. Those systems place far too many constraints on how your blog works, and they also happen to be the only place that your data is housed. Sure, I could write my posts in Vim and then copy/paste them into the platform, but that&#8217;s annoying. I wanted to manage my writing using a plain text editor, mark it up using something lightweight like Markdown, check my writing into version control using Git, generate my site using a tool like Jekyll, and then push my site to the cloud. What was the easiest way to achieve all of this goodness? <a href="http://octopress.org">Octopress</a> seemed to fit the bill.</p>

<p>So, what you now see is the result of my labor in migrating from WordPress.com to Octopress, hosted at Heroku. One day (perhaps) I&#8217;ll write up the process that I used. It was a bit convoluted and involved gigantic piles of yak hair, so I&#8217;d rather not consider that piece right now.</p>

<p>What I will be focusing on quite a bit is the idea of simplicity. For more than a decade I have wandered through the barren wasteland that is accidental complexity in software. A few months ago I viewed Rich Hickey’s <a href="https://thestrangeloop.com/sessions/simple-made-easy">keynote session at StrangeLoop 2011</a> entitled <a href="http://www.infoq.com/presentations/Simple-Made-Easy">“Simple Made Easy”</a>. It is Rich’s definition of simplicity in software that has inspired the brand new title of this blog, wherein I will chronicle my continuing quest to seek out simplicity in software structure.</p>

<p>Alas, it is time to return to billable work. I shall endeavor to post again in far less than a year. So, as we say in the south, &#8220;Ya&#8217;ll come back now, you hear?&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Meeting Patterns/Antipatterns]]></title>
    <link href="http://mattstine.com/2011/05/16/design-meeting-patternsantipatterns/"/>
    <updated>2011-05-16T16:57:50-05:00</updated>
    <id>http://mattstine.com/2011/05/16/design-meeting-patternsantipatterns</id>
    <content type="html"><![CDATA[<p>For those of you that don&#8217;t know, I recently returned to the technical ranks as a Software Architect after a three-year stint in management. To make a long story short, I now love my job again. Perhaps I&#8217;ll write the long story in a future blog entry. On to the topic at hand. Today I led the first significant design discussion that I have led in quite a long time. A few minutes afterward, I was already reflecting on what had occurred and how. The very first thing that I noticed was my drastically different approach to the task. I felt that my facilitation skills were more mature and effective than I remember from previous similar engagements. I&#8217;m not sure if the time I spent in management (where I facilitated quite a few meetings, though much more business-focused ones) helped, but something certainly has.</p>

<p>I also noticed several things that I&#8217;ll call &#8220;pattern vs. antipattern&#8221; tugs of war. Quite often during the meeting I felt the group trying to move our discussion in one direction that I, for better or for worse, thought was ineffective. I would then redirect us on to what I felt was a better path. In true catalog form, here&#8217;s the list:</p>

<ul>
<li><p><strong>Understand the Problem vs. Jump to the Solution</strong> - only a couple of minutes into our discussion solutions were being flung about like drunken darts. This situation almost always leads to suboptimal or faulty solutions. As a facilitator, try to ensure that the problem has been clearly stated. If at all possible, write it down on a whiteboard. Make sure everyone agrees that the problem as stated is the problem the group is there to solve. Sure enough, after performing this exercise, we all had a very different and clear understanding of the problem than that with which we walked in the door.</p></li>
<li><p><strong>Assume the Worst vs. Assume the Best</strong> - occasionally the exact details of a requirement are unclear, and not assuming something will totally derail the design discussion. You have a couple of choices. The first is to halt the discussion and get the details cleared up. This is clearly the best solution, as you&#8217;ll no longer have to assume anything. However, it can be the case that the person who can clear things up isn&#8217;t available. Or in some cases, the question you&#8217;ll be asking will require another meeting at another level of the organization. If you find yourself in that spot, and you can&#8217;t wait (we couldn&#8217;t!), then the best approach is to work from the worst possible case scenario. You&#8217;ll then be in the best position to handle whatever answer comes your way. However, our tendency is often to assume the best (&#8220;That will <em>never</em> happen!&#8221;). Fight that tendency. However, whatever you choose, follow up at your earliest opportunity.</p></li>
<li><p><strong>Basing Decisions on the Current Situation vs. Basing Decisions on History</strong> - many times the group wanted to veer off into safer territory. In some cases, a possible solution departed significantly from the current design. While this is a valid concern (we do want consistency of design across the system where possible), it is certainly not a trump card. Occasionally the situation at hand will merit a significant departure from the current design. Another way history can rear its ugly head is the assertion that we&#8217;ve always solved similar problems like &#8216;x,&#8217; so we should do so with this problem as well. Again, note the word &#8220;similar.&#8221; All problems are somewhat different and have their own eccentricities. So, rather than working from history, I pushed us back to a clean slate with the statement &#8220;Let&#8217;s stop thinking about the past and start from scratch. We may very well come up with the same solution you guys are proposing, but I&#8217;d rather do so through our own objective analysis and not instinct.&#8221; Guess what. We came up with a different solution that we all felt better about.</p></li>
<li><p><strong>Shooting for the &#8220;Best&#8221; Solution vs. the &#8220;Easiest&#8221; Solution</strong> - now sometimes we can&#8217;t afford the best solution. I grant that. However, I&#8217;m trying to fight the tendency to immediately jump to the &#8220;easiest thing that could possibly work.&#8221; Often this pops up in the first P vs. AP - if we don&#8217;t clearly understand the problem, sometimes an easy solution jumps out that doesn&#8217;t deal with the underlying details we&#8217;ve yet to uncover. Also, sometimes the best solution is quite simple and elegant. It doesn&#8217;t necessarily have to be harder and more complex than the easiest solution. In fact, sometimes the &#8220;easiest&#8221; solution leads to the most accidental complexity in the long-run. So, shoot for the best solution you can come up with and only then, optimize for cost.</p></li>
<li><p><strong>Present Possible Solutions Objectively vs. My Solution is the Best!</strong> - one would hope that we all start here, but we don&#8217;t. We tend to like our own solutions to problems and want them to &#8220;win.&#8221; Our ego can get in the way of even hearing an alternate solution presented by another team member. I point you to <a href="http://www.code-magazine.com/Article.aspx?quickid=1105121">my colleague Ted Neward&#8217;s post for more on &#8220;egoless programming.&#8221;</a> So, as a facilitator, you&#8217;ve got to make sure that all solutions are presented objectively. I often had to say things like &#8220;OK, let&#8217;s assume before we ever get started that this is a good solution to the problem and not hack away at it until its fully presented, and we all understand it.&#8221; In the end, this insistence led us to choose a solution that none of us (myself included) originally thought we&#8217;d pick.</p></li>
<li><p><strong>Validating from Code vs. Validating from Memory</strong> - more often than not, questions about the existing design/code/behavior will come up. Rather than scratching your head and trying to remember what you wrote six months ago, pull up the code and find out. I can&#8217;t tell you the number of meetings I&#8217;ve attended where baseless assertions were made about existing code, only to require another meeting the next day to revisit the whole discussion once those assertions were proven wrong. Again, as a facilitator, I directed us to solve every problem for which all of the facts were available. We inserted placeholders in our solution where questions remained. Guess what we&#8217;re doing now? Well, I&#8217;m blogging about the meeting, but the rest of us are validating from code. Tomorrow will fill in the blanks!</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Conference 2011]]></title>
    <link href="http://mattstine.com/2011/01/05/selenium-conference-2011/"/>
    <updated>2011-01-05T12:18:23-06:00</updated>
    <id>http://mattstine.com/2011/01/05/selenium-conference-2011</id>
    <content type="html"><![CDATA[<p>I completed an interest survey for a potential Selenium-focused conference several weeks ago, and I&#8217;m excited to let you know that the &#8220;powers that be&#8221; have decided that the conference is going to happen! I have already submitted my &#8220;Executable Specifications: Automating Your Requirements Document with Geb and Spock&#8221; talk as a potential session. Whether it makes the conference program or not, I plan on attending the event. Here are the details:</p>

<p><img src="http://mattstine.files.wordpress.com/2011/01/selenium-conf-2011.png" alt="Selenium Conference 2011" /></p>

<blockquote><p>Join members of the growing Selenium community for 3 jam-packed days of talks, workshops, lightning talks, and hack sessions. Hear speakers from around the world talk about the present and future of automated testing, share ideas with fellow Selenium developers, including Core Committers, and take part in shaping the future success of the Selenium project.</p></blockquote>

<p><strong>When:</strong> April 4-6, 2011
<strong>Where:</strong> Marines’ Memorial Club &amp; Hotel, 609 Sutter St, San Francisco, CA 94102 USA
<strong>Register now to be a speaker or sponsor. More details: <a href="http://www.seleniumconf.com/">http://www.seleniumconf.com/</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2010 in review: the automated analysis...]]></title>
    <link href="http://mattstine.com/2011/01/02/2010-in-review-the-automated-analysis/"/>
    <updated>2011-01-02T20:28:25-06:00</updated>
    <id>http://mattstine.com/2011/01/02/2010-in-review-the-automated-analysis</id>
    <content type="html"><![CDATA[<p>The stats helper monkeys at WordPress.com mulled over how this blog did in 2010, and here&#8217;s a high level summary of its overall blog health:</p>

<p><img src="http://s0.wp.com/i/annual-recap/meter-healthy3.gif" alt="Healthy blog!" /></p>

<p>The <em>Blog-Health-o-Meter™</em> reads Fresher than ever.</p>

<h2>Crunchy numbers</h2>

<pre><code>            ![Featured image](http://s0.wp.com/i/annual-recap/abstract-stats-1.png)
</code></pre>

<p><em>A helper monkey made this abstract painting, inspired by your stats.</em></p>

<p>A Boeing 747-400 passenger jet can hold 416 passengers.  This blog was viewed about <strong>6,600</strong> times in 2010.  That&#8217;s about 16 full 747s.</p>

<p>In 2010, there were <strong>15</strong> new posts, growing the total archive of this blog to 115 posts. There were <strong>24</strong> pictures uploaded, taking up a total of 979kb. That&#8217;s about 2 pictures per month.</p>

<p>The busiest day of the year was June 4th with <strong>139</strong> views. The most popular post that day was <a href="http://mattstine.com/2010/06/03/dont-build-software-thats-too-smart/">Don&#8217;t build software that&#8217;s TOO smart!</a>.</p>

<h2>Where did they come from?</h2>

<p>The top referring sites in 2010 were <strong>agile.dzone.com</strong>, <strong>java.dzone.com</strong>, <strong>twitter.com</strong>, <strong>Google Reader</strong>, and <strong>javablogs.com</strong>.</p>

<p>Some visitors came searching, mostly for <strong>matt stine</strong>, <strong>groovy http post</strong>, <strong>groovy post</strong>, <strong>groovy url post</strong>, and <strong>groovy url encode</strong>.</p>

<h2>Attractions in 2010</h2>

<p>These are the posts and pages that got the most views in 2010.</p>

<p>1</p>

<pre><code>                [Don't build software that's TOO smart!](http://mattstine.com/2010/06/03/dont-build-software-thats-too-smart/) June 2010  
</code></pre>

<p>1 comment</p>

<p>2</p>

<pre><code>                [Groovy: Post to a URL](http://mattstine.com/2009/04/25/groovy-post-to-a-url/) April 2009  
</code></pre>

<p>4 comments</p>

<p>3</p>

<pre><code>                [Resume](http://mattstine.com/resume/) March 2009                                           
</code></pre>

<p>4</p>

<pre><code>                [Deploying Grails with Groovy](http://mattstine.com/2009/03/29/deploying-grails-with-groovy/) March 2009                                            
</code></pre>

<p>5</p>

<pre><code>                [LOTY Time Again: Scala or Clojure?!?!](http://mattstine.com/2009/04/02/loty-time-again-scala-or-clojure/) April 2009  
</code></pre>

<p>17 comments</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium 2.0 Refcard]]></title>
    <link href="http://mattstine.com/2010/11/29/selenium-2-0-refcard/"/>
    <updated>2010-11-29T15:44:18-06:00</updated>
    <id>http://mattstine.com/2010/11/29/selenium-2-0-refcard</id>
    <content type="html"><![CDATA[<p><a href="http://refcardz.dzone.com/refcardz/getting-started-selenium-20?oid=hom31797"><img src="http://mattstine.files.wordpress.com/2010/11/31797.png" alt="" /></a>Today DZone released my first Refcard: &#8221;<a href="http://refcardz.dzone.com/refcardz/getting-started-selenium-20?oid=hom31797">Selenium 2.0: Using the WebDriver API to Create Robust User Acceptance Tests</a>.&#8221; I have been interested in writing a Refcard for a long time but have never pulled the trigger. For whatever reason, I decided to jump on the bandwagon last month. Writing this card was quite a challenge, as it&#8217;s difficult to boil down a big topic into only six pages while keeping it useful. Thus far the feedback from the community has been largely positive.</p>

<p>If you&#8217;re looking for your next automated testing tool for browser-based user acceptance tests, download the card and let me know what you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Zone Roundup]]></title>
    <link href="http://mattstine.com/2010/11/10/agile-zone-roundup/"/>
    <updated>2010-11-10T08:53:15-06:00</updated>
    <id>http://mattstine.com/2010/11/10/agile-zone-roundup</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been really quiet on this blog lately. There have been multiple reasons for that. I&#8217;ve been extremely busy preparing for conferences this Fall including SpringOne/2GX and The Rich Web Experience. I&#8217;ve also stayed busy writing for DZone. I have my first DZone Refcard coming out soon, which is focused on Web Driver/Selenium 2. I&#8217;ve also been writing my regular articles for Agile Zone. Here&#8217;s a roundup:</p>

<ul>
<li><p><a href="http://agile.dzone.com/articles/modular-agile-loosely-coupled">Modular Agile: Loosely coupled, highly cohesive ceremonies</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/think-youre-doing-kanban-think">   Think You&#8217;re &#8220;Doing Kanban?&#8221; Think Again.</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/gaelyks-and-golden-hammers">On Gaelyks and Golden Hammers</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/automation-people-because">Automation for the People (because Everybody Doing It Manually Hurts)  </a></p></li>
<li><p><a href="http://agile.dzone.com/articles/build-scripts-we-dont-need-no">Build Scripts? We Don&#8217;t Need No Stinkin&#8217; Build Scripts!</a></p></li>
<li><p><a href="http://agile.dzone.com/polls/automated-browser-testing">Automated Browser Testing: What&#8217;s in Your Toolkit?</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/selenese-or-not-test-seems-be">To Selenese or not to Test? That Seems to be the Question.</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/apple-jvm-extra-feature">Is the Apple JVM an &#8220;Extra Feature?&#8221;</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Seven Wastes of Software Development]]></title>
    <link href="http://mattstine.com/2010/11/10/the-seven-wastes-of-software-development/"/>
    <updated>2010-11-10T08:44:29-06:00</updated>
    <id>http://mattstine.com/2010/11/10/the-seven-wastes-of-software-development</id>
    <content type="html"><![CDATA[<p>In late September I completed an eight-part article series for Agile Zone entitled &#8220;The Seven Wastes of Software Development.&#8221; This series discussed Mary and Tom Poppendieck&#8217;s mapping of Shigeo Shingo&#8217;s &#8220;Seven Wastes of Lean Manufacturing&#8221; into the software development world. This has been a very popular series, having been viewed a total of 57,887 times at this writing. Here&#8217;s a set of links to the series:</p>

<ul>
<li><strong><a href="http://agile.dzone.com/articles/seven-wastes-software">The Seven Wastes of Software Development - Introduction</a></strong></li>
<li><strong><a href="http://agile.dzone.com/articles/waste-1-partially-done-work">Waste #1 - Partially Done Work</a></strong></li>
<li><strong><a href="http://agile.dzone.com/articles/waste-2-extra-features">Waste #2 - Extra Features</a></strong></li>
<li><strong><a href="http://agile.dzone.com/articles/waste-3-relearning">Waste #3 - Relearning</a></strong></li>
<li><strong><a href="http://agile.dzone.com/articles/waste-4-handoffs">Waste #4 - Handoffs</a></strong></li>
<li><a href="http://agile.dzone.com/articles/waste-5-delays"><strong>Waste #5 - Delays </strong></a></li>
<li><a href="http://agile.dzone.com/articles/waste-6-task-switching"><strong>Waste #6 - Task Switching </strong></a></li>
<li><a href="http://agile.dzone.com/articles/waste-7-defects"><strong>Waste #7 - Defects</strong></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Agile Guerilla Series]]></title>
    <link href="http://mattstine.com/2010/09/05/the-agile-guerilla-series/"/>
    <updated>2010-09-05T20:28:43-05:00</updated>
    <id>http://mattstine.com/2010/09/05/the-agile-guerilla-series</id>
    <content type="html"><![CDATA[<p>I recently completed a series of articles for Agile Zone entitled &#8220;The Agile Guerilla.&#8221; Those of you that have seen me on the No Fluff Just Stuff tour this year may recognize a talk by the same name. They are one and the same concept: my attempt to reach the masses with strategies for introducing change, specifically moving to agility, into organizations from the grassroots level.</p>

<p>Here&#8217;s a list of the complete set of articles for your convenience!</p>

<ul>
<li><a href="http://agile.dzone.com/articles/agile-guerilla">The Agile Guerilla</a></li>
<li><a href="http://agile.dzone.com/articles/show-dont-tell-persuade-dont">Show (Don&#8217;t Tell), Persuade (Don&#8217;t Preach)</a></li>
<li><a href="http://agile.dzone.com/articles/going-guerilla-where-start">Going Guerilla: Where to Start</a></li>
<li><a href="http://agile.dzone.com/articles/guerillas-workflow">The Guerilla&#8217;s Workflow</a></li>
<li><a href="http://agile.dzone.com/articles/guerilla-tdd">Guerilla TDD </a></li>
<li><p><a href="http://agile.dzone.com/articles/guerilla-continuous">Guerilla Continous Integration</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/so-what-are-you-waiting-go">So What Are You Waiting For? GO BANANAS!</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Agile Zone Articles!]]></title>
    <link href="http://mattstine.com/2010/08/02/more-agile-zone-articles/"/>
    <updated>2010-08-02T08:44:04-05:00</updated>
    <id>http://mattstine.com/2010/08/02/more-agile-zone-articles</id>
    <content type="html"><![CDATA[<p>Just to prove that I am writing, just not here, I thought I&#8217;d post another collection of links to my latest Agile Zone articles:</p>

<ul>
<li><p><a href="http://java.dzone.com/articles/yes-you-kanban">Yes You Kanban!</a></p></li>
<li><p><a href="http://java.dzone.com/articles/guerillas-workflow">The Guerilla&#8217;s Workflow</a></p></li>
<li><p><a href="http://java.dzone.com/articles/feedback-key">Feedback is the Key!</a></p></li>
<li><p><a href="http://java.dzone.com/articles/going-guerilla-where-start">Going Guerilla: Where to Start</a></p></li>
</ul>


<p>In the near future you can look forward to a few more episodes of &#8220;The Agile Guerilla&#8221; series, as well as a brand new series I&#8217;ll be starting entitled &#8220;The Seven Wastes of Software Development.&#8221;</p>

<p>Got any topics you want to hear more about? Post up in the comments and I&#8217;ll see about covering them at Agile Zone in the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm in the zone...Agile Zone.]]></title>
    <link href="http://mattstine.com/2010/07/20/im-in-the-zone-agile-zone/"/>
    <updated>2010-07-20T22:38:09-05:00</updated>
    <id>http://mattstine.com/2010/07/20/im-in-the-zone-agile-zone</id>
    <content type="html"><![CDATA[<p>My apologies to my colleagues down the street at <a href="http://www.autozone.com">AutoZone</a>, but I just had to do that. :-)</p>

<p>I recently accepted the role of Agile Zone Leader at <a href="http://agile.dzone.com">DZone.com</a>. For the past few weeks I&#8217;ve been publishing a couple of articles a week on various agile development topics. I&#8217;m very happy to get the extra exposure and I hope that folks are getting some value out of my posts. On the downside, I have virtually zero time to write anything here, but on the upside I&#8217;m definitely writing more regularly. Nothing like positive pressure to deliver!</p>

<p>Here are some links to my recent articles:</p>

<ul>
<li><p><a href="http://agile.dzone.com/articles/you-are-your-softwares-immune">You Are Your Software&#8217;s Immune System!</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/interview-w-alan-shalloway">Interview: Alan Shalloway on Lean Agile Software Development, Part One</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/interview-w-alan-shalloway">Interview: Alan Shalloway on Lean Agile Software Development, Part Two</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/show-dont-tell-persuade-dont">Show (Don&#8217;t Tell), Persuade (Don&#8217;t Preach)</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/scrummaster-said-i-had">But the ScrumMaster said I had to!</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/agile-guerilla">The Agile Guerilla</a></p></li>
<li><p><a href="http://agile.dzone.com/articles/use-stories-deliver">Use Stories to Deliver Business Value</a></p></li>
</ul>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two new NFJS talks for this fall!]]></title>
    <link href="http://mattstine.com/2010/07/06/two-new-nfjs-talks-for-this-fall/"/>
    <updated>2010-07-06T21:40:00-05:00</updated>
    <id>http://mattstine.com/2010/07/06/two-new-nfjs-talks-for-this-fall</id>
    <content type="html"><![CDATA[<p>I&#8217;m excited to announce that I am working up two brand new talks for this Fall to go along side my regular fare. Both of these talks are already scheduled for shows in Boston, MA and Seattle, WA.</p>

<p>The first talk is entitled &#8220;The Seven Wastes of Software Development.&#8221; We&#8217;ll begin by examining one of the key tenets of Lean Software Development, that of eliminating waste. We&#8217;ll then walk through the seven wastes identified by Mary and Tom Poppendieck in their books:</p>

<ul>
<li><p>Partially Done Work</p></li>
<li><p>Extra Processes</p></li>
<li><p>Extra Features</p></li>
<li><p>Task Switching</p></li>
<li><p>Waiting</p></li>
<li><p>Motion</p></li>
<li><p>Defects</p></li>
</ul>


<p>We&#8217;ll examine each of these wastes and look at some of their common manifestations, both in our coding practices and in our development methodologies. We&#8217;ll also examine strategies for eliminating each of these wastes from our development efforts.</p>

<p>The second talk is entitled &#8220;Yes You Kanban!&#8221; Kanban is sweeping through the agile software development space. Is it hype? Or is it a useful tool to add to our belt? In this session, we&#8217;ll walk through the following topics and I&#8217;ll let you be the judge:</p>

<ul>
<li><p>What is Kanban?</p></li>
<li><p>What is Kanban NOT?</p></li>
<li><p>Comparison to SCRUM</p></li>
<li><p>Roots of Kanban</p></li>
<li><p>David Anderson&#8217;s five essential elements/principles of Kanban (Visualize workflow, Limit work-in-progress, Measure &amp; manage flow, Make process policies explicit, Use models to recognize improvement opportunities)</p></li>
<li><p>Examples of Kanban systems</p></li>
</ul>


<p>I hope to see some of you in these talks this Fall and I look forward to our discussions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NFJS Fall 2010: What do you want to learn?]]></title>
    <link href="http://mattstine.com/2010/06/22/nfjs-fall-2010-what-do-you-want-to-learn/"/>
    <updated>2010-06-22T10:06:16-05:00</updated>
    <id>http://mattstine.com/2010/06/22/nfjs-fall-2010-what-do-you-want-to-learn</id>
    <content type="html"><![CDATA[<p>Hi everyone! I&#8217;m currently in the process of developing new talks for my Fall 2010 NFJS tour dates. While I don&#8217;t know yet where I&#8217;ll be speaking, I can tell you that I&#8217;ve registered availability for the following shows:</p>

<ul>
<li><p>Boston, MA</p></li>
<li><p>Seattle, WA</p></li>
<li><p>Atlanta, GA</p></li>
<li><p>Minneapolis, MN</p></li>
<li><p>Chicago, IL</p></li>
<li><p>Denver, CO</p></li>
</ul>


<p>So, if you&#8217;re in one of those cities and you&#8217;re thinking about attending NFJS when it comes your way (see <a href="http://www.nofluffjuststuff.com">here</a> for the schedule), I&#8217;d like to know what you want to hear about assuming I come your way.</p>

<p>To narrow down the potentials a bit, here are my personal areas of focus:</p>

<ul>
<li><p>Agility/Lean/Kanban</p></li>
<li><p>Native Mobile and Web Mobile Software Development (iPhone/iPad/Android)</p></li>
<li><p>Web Development in General (HTML5/CSS3/JavaScript)</p></li>
<li><p>Modularity and OSGi</p></li>
</ul>


<p>If there are any topics from these four areas that you&#8217;d like to hear more about, please speak up in the comments section. And even if you&#8217;re not in one of these cities, most of any talks I develop for the Fall will likely show up on the 2011 tour as well, so please speak up anyway!</p>

<p>Thanks in advance for your feedback!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't build software that's TOO smart!]]></title>
    <link href="http://mattstine.com/2010/06/03/dont-build-software-thats-too-smart/"/>
    <updated>2010-06-03T17:00:35-05:00</updated>
    <id>http://mattstine.com/2010/06/03/dont-build-software-thats-too-smart</id>
    <content type="html"><![CDATA[<p>I had an extremely successful meeting with one of our clients yesterday. We were discussing how we wanted to go about migrating her laboratory from its current system (one that we built several years ago) to our new lab management platform. At some point during the discussion I made the statement, &#8220;We tried to make the previous system too smart! We&#8217;re not repeating that mistake this time.&#8221; Of course, she was in complete agreement with that principle. I&#8217;ve had similar interactions with our other clients that are making migrations (rather than encountering our system for the first time on this new version), and although I&#8217;ve never explicitly stated the principle that way, similar sentiments have abounded.</p>

<p>What is too smart software? In our case, it was a system that attempted to encapsulate every single rule of &#8220;business&#8221; process that occurred within a given laboratory. Many times statements were flung around like &#8220;will it ALWAYS happen this way,&#8221; &#8220;what should we do if this happens?&#8221; etc., etc., etc. We tried to cover every single possibility, and we did an excellent job of preventing users from ever breaking their own rules. What we didn&#8217;t realize (and we&#8217;re not unique - this problem is RAMPANT) is that the rules CHANGE. Rules come, rules go. Sometimes the rule remains, but there are a few exceptional cases that must be dealt with. Our system simply couldn&#8217;t deal with a world that worked this way - and thus, our system was completely unfit for the real world.</p>

<p>We set out with a different mission this time. If there&#8217;s one overriding characteristic of SRM (Shared Resource Management) 2.0, it&#8217;s the explicit assumption that the world will change continually. We don&#8217;t attempt to tell you how you must use this system. We capture your data, we invoice for your services, we run your reports - but YOU, the user gets to decide how you&#8217;ll interact with it. If your workflow changes, we change with you. Now the devil is in the details. It&#8217;s taken roughly 20-30 man years worth of effort to build a system like this, and it hasn&#8217;t been easy. But in the end, we&#8217;re finding that those years were much better spent ENABLING our users rather than PREVENTING our users from getting things done.</p>

<p>I&#8217;m not sure that I&#8217;ve gotten my point across in this brief diatribe, so I&#8217;ll attempt to sum it up here. If you&#8217;re developing a system, figure out the 2 or 3 things that will make your users&#8217; lives AWESOME, and do those 2 or 3 things extremely well. Don&#8217;t do the rest AT ALL. Don&#8217;t build a system that attempts to be smarter than the knowledge expert using it - it&#8217;s a means to your user&#8217;s end, not an end in itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing NOSQL Summer Memphis]]></title>
    <link href="http://mattstine.com/2010/05/28/announcing-nosql-summer-memphis/"/>
    <updated>2010-05-28T09:21:43-05:00</updated>
    <id>http://mattstine.com/2010/05/28/announcing-nosql-summer-memphis</id>
    <content type="html"><![CDATA[<p>I recently stumbled across the <a href="http://nosqlsummer.org/">NOSQL Summer</a> website via my friend Alex Miller&#8217;s <a href="http://tech.puredanger.com/2010/05/25/nosql-summer-st-louis/">blog</a>. The idea is to setup a summer reading club focused around databases and distributed systems. Groups will gather &#8220;worldwide&#8221; to discuss various papers and the hopefully submit the substance of their discussions back to the NOSQL Summer website in the form of annotated papers.</p>

<p>This sounded like a great idea to me, so I decided that we&#8217;d co-locate a NOSQL Summer discussion with our monthly Memphis JUG meetings. You can find the details of our NOSQL meetings at <a href="http://nosqlsummer.org/city/memphis">http://nosqlsummer.org/city/memphis</a>. We&#8217;ll start at 5:30 and run until 6:15-6:30. If you&#8217;re interested in these discussions, come on out to Southwest TN Community College on June 24th (even if you&#8217;re not a Java type!).</p>

<p>Our first paper will be <a href="http://nosqlsummer.org/paper/end-of-architectural-era">The End of an Architectural Era (It&#8217;s Time for a Complete Rewrite)</a>. Please read it before the meeting and come prepared to mindshare.</p>

<p>If there&#8217;s enough interest in these discussions, we could start having a lunch time discussion at a centrally located restaurant halfway between each JUG meeting. We can discuss this at our first meeting in June. I hope to see you there!</p>
]]></content>
  </entry>
  
</feed>
